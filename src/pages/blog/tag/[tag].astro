---
import { getCollection } from 'astro:content';
import BaseLayout from '../../../layouts/BaseLayout.astro';
import BlogPostCard from '../../../components/ui/BlogPostCard.astro';
import PageHeader from '../../../components/ui/PageHeader.astro';
import SEO from '../../../components/SEO.astro';

export async function getStaticPaths() {
  const blogPosts = await getCollection('blog');
  const publishedPosts = blogPosts.filter(post => !post.data.draft);
  
  // Get all unique tags
  const allTags = publishedPosts.flatMap(post => post.data.tags || []);
  const uniqueTags = [...new Set(allTags)];
  
  return uniqueTags.map(tag => {
    const tagPosts = publishedPosts
      .filter(post => post.data.tags?.includes(tag))
      .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
    
    return {
      params: { tag: tag.toLowerCase().replace(/\s+/g, '-') },
      props: { 
        tag, 
        posts: tagPosts,
        tagSlug: tag.toLowerCase().replace(/\s+/g, '-')
      },
    };
  });
}

const { tag, posts, tagSlug } = Astro.props;
const postCount = posts.length;
const pageTitle = `${tag} Posts - Bruce Denham`;
const pageDescription = `${postCount} blog post${postCount !== 1 ? 's' : ''} about ${tag}. Explore content about ${tag.toLowerCase()} from Bruce Denham.`;
---

<BaseLayout
  title={pageTitle}
  description={pageDescription}
  showBackLink={true}
  backLinkText="← Back to Blog"
  backLinkHref="/blog/"
  footerText="Discover more tags! "
  footerLinkText="Browse all posts"
  footerLinkHref="/blog/"
>
  <!-- Enhanced SEO for tag page -->
  <SEO
    slot="head"
    title={pageTitle}
    description={pageDescription}
    type="website"
    canonical={`https://bruuce.com/blog/tag/${tagSlug}/`}
  />

  <div class="tag-page">
    <!-- Tag header -->
    <div class="tag-header">
      <PageHeader primary={tag} accent="Posts" />
      <p class="lead tag-description">
        {postCount} post{postCount !== 1 ? 's' : ''} about <strong>{tag}</strong>
      </p>
    </div>

    <!-- Tag posts -->
    <div class="tag-posts">
      {posts.map((post) => (
        <BlogPostCard post={post} showTags={false} />
      ))}
    </div>

    <!-- Related tags -->
    {posts.length > 0 && (
      <div class="related-tags">
        <h3>Related Tags</h3>
        <div class="tags-cloud">
          {[...new Set(posts.flatMap(post => post.data.tags || []).filter(t => t !== tag))].slice(0, 10).map(relatedTag => (
            <a 
              href={`/blog/tag/${relatedTag.toLowerCase().replace(/\s+/g, '-')}/`}
              class="related-tag"
            >
              {relatedTag}
            </a>
          ))}
        </div>
      </div>
    )}

    <!-- Tag navigation -->
    <div class="tag-navigation">
      <a href="/blog/" class="nav-link">
        ← All Posts
      </a>
      <a href="/blog/categories/" class="nav-link">
        Browse by Categories →
      </a>
    </div>
  </div>
</BaseLayout>

<style>
  .tag-page {
    max-width: 100%;
  }

  .tag-header {
    margin-bottom: 2rem;
    text-align: left;
  }

  .tag-description {
    color: var(--text-secondary);
    font-size: 1.125rem;
    margin-top: 0.5rem;
  }

  .tag-posts {
    margin-bottom: 3rem;
  }

  .related-tags {
    margin: 2rem 0;
    padding: 1.5rem;
    background: var(--bg-card);
    border: 1px solid var(--border-secondary);
    border-radius: 1rem;
  }

  .related-tags h3 {
    margin: 0 0 1rem 0;
    font-size: 1.125rem;
    color: var(--text-primary);
  }

  .tags-cloud {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .related-tag {
    display: inline-block;
    padding: 0.375rem 0.75rem;
    background: var(--tag-bg);
    color: var(--tag-text);
    text-decoration: none;
    border: 1px solid var(--border-primary);
    border-radius: 0.75rem;
    font-size: 0.875rem;
    font-weight: 500;
    transition: all 0.2s ease;
  }

  .related-tag:hover {
    background: var(--bg-card-hover);
    border-color: var(--accent-primary);
    transform: translateY(-1px);
  }

  .tag-navigation {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 2rem 0;
    border-top: 1px solid var(--border-secondary);
    margin-top: 2rem;
  }

  .nav-link {
    display: inline-flex;
    align-items: center;
    padding: 0.75rem 1.25rem;
    background: var(--bg-card);
    color: var(--text-primary);
    text-decoration: none;
    border: 1px solid var(--border-secondary);
    border-radius: 0.75rem;
    font-weight: 500;
    transition: all 0.2s ease;
  }

  .nav-link:hover {
    background: var(--bg-card-hover);
    border-color: var(--accent-primary);
    transform: translateY(-1px);
  }

  @media (max-width: 640px) {
    .tag-navigation {
      flex-direction: column;
      gap: 1rem;
    }

    .nav-link {
      width: 100%;
      justify-content: center;
    }

    .tags-cloud {
      justify-content: center;
    }
  }
</style>
