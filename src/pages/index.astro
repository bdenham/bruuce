---
import { getCollection } from 'astro:content';
import BaseLayout from '../layouts/BaseLayout.astro';
import BlogPostCard from '../components/ui/BlogPostCard.astro';
import ActionCard from '../components/ui/ActionCard.astro';

// Get the latest 2 blog posts for the homepage
const blogPosts = await getCollection('blog');
const latestPosts = blogPosts
  .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf())
  .slice(0, 2);
---

<BaseLayout
  title="Bruce Denham - Senior Technical Writer & Developer Experience Strategist"
  description="Senior Technical Writer & Developer Experience Strategist at Adobe with 30+ years turning complex concepts into clear developer experiences."
  footerText="Thanks for visiting! Let's build better developer experiences together."
>
  <h1 id="main-title"><span>Bruce</span> Denham</h1>
  <p class="subtitle homepage">Senior Technical Writer & Developer Experience Strategist</p>
  <p class="lead">
    üèÜ <strong>Adobe award nominee</strong> with 30+ years turning complex concepts into clear, human
    experiences. I help developers learn fast, build smart, and ship with confidence.
  </p>
  <p class="lead">
    At Adobe, I've built developer and SDK docs, CLI tools, React apps, interactive playgrounds and
    custom search systems ‚Äî all built to reduce friction and spark "aha" moments.
  </p>

  <div class="action-cards grid-medium grid-with-margin">
    <ActionCard
      icon="üìã"
      title="My Resume"
      description="Explore my 30+ years of experience in technical writing and developer experience"
      href="/resume/"
      ariaLabel="View my complete resume"
    />

    <ActionCard
      icon="üõ†Ô∏è"
      title="My Work"
      description="SDK docs, CLI tools, React apps, and developer experience projects at Adobe and beyond"
      href="/work/"
      ariaLabel="View my professional work and projects"
    />

    <ActionCard
      icon="üìù"
      title="My Blog"
      description="Insights on developer experience, API documentation, and making complex concepts clear"
      href="/blog/"
      ariaLabel="Read my blog"
    />

    <ActionCard
      icon="üë®‚Äçüíª"
      title="About Me"
      description="Learn about my journey from Schlumberger to TOPAZ to Adobe as a developer experience strategist"
      href="/about/"
      ariaLabel="Learn more about my background"
    />
  </div>

  <div class="section">
    <h2>My Philosophy</h2>
    <p>
      I don't just write the docs. I build tools, craft interfaces, and create explanations that
      click. I code. I design. I connect. My mission is helping developers have those "aha" moments
      that turn complexity into clarity and frustration into flow.
    </p>
  </div>

  <div class="section">
    <h2>Recent Posts</h2>
    <div class="blog-posts-container">
      {
        latestPosts.map((post, index) => (
          <div class={`blog-post-wrapper ${index > 0 ? 'lazy-load' : ''}`}>
            <BlogPostCard post={post} />
          </div>
        ))
      }
    </div>
  </div>

  <div class="footer-links">
    <a href="/resume/">Resume</a>
    <a href="/work/">My Work</a>
    <a href="/about/">About</a>
    <a href="/blog/">Blog</a>
  </div>
</BaseLayout>

<!-- DEBUG: Monitor what's changing the layout -->
<script>
  function debugLayout() {
    const appContent = document.querySelector('.app-content');
    const mainContainer = document.querySelector('.main-container');
    const contentPanel = document.querySelector('.content-panel');

    if (appContent) {
      const rect = appContent.getBoundingClientRect();
      console.log('App content position:', {
        top: rect.top,
        left: rect.left,
        transform: getComputedStyle(appContent).transform,
        marginTop: getComputedStyle(appContent).marginTop,
        paddingTop: getComputedStyle(appContent).paddingTop,
        position: getComputedStyle(appContent).position,
      });
    }

    if (mainContainer) {
      const rect = mainContainer.getBoundingClientRect();
      console.log('Main container position:', {
        top: rect.top,
        left: rect.left,
        transform: getComputedStyle(mainContainer).transform,
        marginTop: getComputedStyle(mainContainer).marginTop,
        paddingTop: getComputedStyle(mainContainer).paddingTop,
        position: getComputedStyle(mainContainer).position,
      });
    }

    if (contentPanel) {
      const rect = contentPanel.getBoundingClientRect();
      console.log('Content panel position:', {
        top: rect.top,
        left: rect.left,
        transform: getComputedStyle(contentPanel).transform,
        marginTop: getComputedStyle(contentPanel).marginTop,
        paddingTop: getComputedStyle(contentPanel).paddingTop,
        position: getComputedStyle(contentPanel).position,
      });
    }
  }

  // Log immediately
  debugLayout();

  // Log after DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      console.log('After DOMContentLoaded:');
      debugLayout();
    });
  }

  // ELEGANT FIX: Disable browser scroll restoration and reset position once
  if ('scrollRestoration' in history) {
    history.scrollRestoration = 'manual';
    console.log('Disabled scroll restoration');
  }

  // Ensure we start at the top
  window.scrollTo(0, 0);

  // Single clean fix after page loads
  function cleanPositionFix() {
    console.log('Running clean position fix');
    debugLayout();

    // Only fix if needed
    const appContent = document.querySelector('.app-content');
    if (appContent) {
      const rect = appContent.getBoundingClientRect();
      if (rect.top < -10) {
        // Only fix if significantly off
        console.log('Applying minimal position correction');
        appContent.style.position = 'relative';
        appContent.style.top = '0';
        appContent.style.marginTop = '0';
      }
    }
  }

  // Run once after DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', cleanPositionFix);
  } else {
    cleanPositionFix();
  }
</script>

<style>
  /* FIX THE ROOT CAUSE: app-content is positioned at top: -40 */
  .app-content {
    margin-left: 280px !important;
    margin-top: 0 !important;
    padding-top: 0 !important;
    position: relative !important;
    top: 0 !important;
    transform: none !important;
  }

  .main-container {
    max-width: 900px !important;
    margin: 0 auto !important;
    padding: 80px 32px 32px 32px !important;
    position: relative !important;
    top: 0 !important;
    transform: none !important;
  }

  .content-panel {
    background: linear-gradient(135deg, var(--bg-tertiary), rgba(167, 139, 250, 0.02)) !important;
    border-radius: 20px !important;
    padding: 40px !important;
    margin: 0 0 32px 0 !important;
    border: 2px solid rgba(148, 163, 184, 0.4) !important;
    box-shadow: 0 8px 32px var(--shadow-secondary) !important;
    position: relative !important;
    top: 0 !important;
    transform: none !important;
    transition: all 0.3s ease !important;
  }

  .content-panel:hover {
    transform: translateY(-2px) !important;
    border-color: var(--accent-primary) !important;
  }

  /* Performance optimizations for blog posts */
  .blog-posts-container {
    display: flex;
    flex-direction: column;
    gap: 0;
  }

  .blog-post-wrapper.lazy-load {
    opacity: 0;
    transform: translateY(20px);
    transition:
      opacity 0.3s ease,
      transform 0.3s ease;
  }

  .blog-post-wrapper.lazy-load.loaded {
    opacity: 1;
    transform: translateY(0);
  }

  /* Mobile override */
  @media (max-width: 1023px) {
    .app-content {
      margin-left: 0 !important;
    }

    .main-container {
      padding: 80px 20px 20px 20px !important;
    }

    .content-panel {
      padding: 18px 20px !important;
    }
  }

  /* Homepage-specific styles only - LinkedIn styles moved to blog page */
</style>

<!-- Performance-optimized lazy loading for blog posts -->
<script>
  // Lazy load second blog post for better Speed Index
  document.addEventListener('DOMContentLoaded', function () {
    const lazyElements = document.querySelectorAll('.blog-post-wrapper.lazy-load');

    if (lazyElements.length > 0) {
      // Delay loading of second post to improve initial render
      setTimeout(() => {
        lazyElements.forEach((el) => {
          el.classList.add('loaded');
        });
      }, 100); // Small delay to prioritize above-the-fold content
    }
  });
</script>
