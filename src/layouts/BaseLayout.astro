---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import Sidebar from '../components/Sidebar.astro';
import '../styles/theme.css';

export interface Props {
  title: string;
  description: string;
  showBackLink?: boolean;
  backLinkText?: string;
  backLinkHref?: string;
  footerText?: string;
  footerLinkText?: string;
  footerLinkHref?: string;
}

const {
  title,
  description,
  showBackLink = false,
  backLinkText = '‚Üê Back to Home',
  backLinkHref = '/',
  footerText = 'Thanks for visiting!',
  footerLinkText,
  footerLinkHref,
} = Astro.props;
---

<!doctype html>
<html lang="en" transition:auto>
  <head>
    <meta charset="utf-8" />
    <title>{title}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="description" content={description} />
    <meta name="color-scheme" content="dark light" />

    <!-- Performance and caching optimization headers -->
    <meta http-equiv="Cache-Control" content="public, max-age=3600, must-revalidate" />
    <meta name="robots" content="index, follow, max-image-preview:large" />

    <!-- Critical resource preloads for Adobe Clean fonts only -->
    <link
      rel="preload"
      href={`${import.meta.env.BASE_URL}fonts/adobe-clean-400.woff2`}
      as="font"
      type="font/woff2"
      crossorigin
    />
    <link
      rel="preload"
      href={`${import.meta.env.BASE_URL}fonts/adobe-clean-700.woff2`}
      as="font"
      type="font/woff2"
      crossorigin
    />

    <!-- Prevent white flash by setting theme early -->
    <script is:inline>
      // Set theme immediately to prevent white flash
      (function () {
        const savedTheme = localStorage.getItem('theme');
        const root = document.documentElement;
        const colorScheme = document.querySelector('meta[name="color-scheme"]');

        if (savedTheme === 'light') {
          root.classList.add('light');
          if (colorScheme) colorScheme.setAttribute('content', 'light dark');
        } else {
          root.classList.remove('light');
          if (colorScheme) colorScheme.setAttribute('content', 'dark light');
        }
      })();
    </script>
  </head>
  <body>
    <!-- Skip link for keyboard navigation -->
    <a href="#main-content" class="skip-link">Skip to main content</a>

    <div id="root">
      <Sidebar />
      <div class="app-content">
        <Header />
        <main class="main-container" id="main-content">
          <section class="content-panel">
            {
              showBackLink && (
                <div class="nav-back">
                  <a href={backLinkHref}>{backLinkText}</a>
                </div>
              )
            }
            <slot />
          </section>
          <Footer text={footerText} linkText={footerLinkText} linkHref={footerLinkHref} />
        </main>
      </div>
    </div>

    <script>
      function updateThemeDisplay(isLight) {
        const themeIcon = document.getElementById('theme-icon');
        const themeText = document.getElementById('theme-text');

        if (themeIcon && themeText) {
          if (isLight) {
            themeIcon.textContent = '‚òÄÔ∏è';
            themeText.textContent = 'Light';
          } else {
            themeIcon.textContent = 'üåô';
            themeText.textContent = 'Dark';
          }
        }
      }

      (window as any).toggleTheme = function () {
        const root = document.documentElement;
        const isCurrentlyLight = root.classList.contains('light');
        const colorScheme = document.querySelector('meta[name="color-scheme"]');

        // Add a brief transition class for smoother theme switching
        root.style.setProperty('--transition-duration', '300ms');

        if (isCurrentlyLight) {
          // Switch to dark
          root.classList.remove('light');
          localStorage.setItem('theme', 'dark');
          updateThemeDisplay(false);
          if (colorScheme) colorScheme.setAttribute('content', 'dark light');
        } else {
          // Switch to light
          root.classList.add('light');
          localStorage.setItem('theme', 'light');
          updateThemeDisplay(true);
          if (colorScheme) colorScheme.setAttribute('content', 'light dark');
        }

        // Remove the transition after it completes
        setTimeout(() => {
          root.style.removeProperty('--transition-duration');
        }, 300);
      };

      // Initialize theme on page load and after View Transitions
      function initTheme() {
        const savedTheme = localStorage.getItem('theme');
        const root = document.documentElement;
        const colorScheme = document.querySelector('meta[name="color-scheme"]');
        const isLight = savedTheme === 'light';

        if (isLight) {
          root.classList.add('light');
          if (colorScheme) colorScheme.setAttribute('content', 'light dark');
        } else {
          root.classList.remove('light');
          if (colorScheme) colorScheme.setAttribute('content', 'dark light');
        }

        updateThemeDisplay(isLight);
      }

      // Initialize theme when page loads
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initTheme);
      } else {
        initTheme();
      }

      // Re-initialize theme after View Transitions
      document.addEventListener('astro:after-swap', initTheme);
    </script>
  </body>
</html>

<style>
  /* Layout adjustments for sidebar */
  #root {
    display: flex;
    min-height: 100vh;
  }

  .app-content {
    flex: 1;
    display: flex;
    flex-direction: column;
    min-height: 100vh;
    transition: margin-left 0.3s ease;
  }

  /* Desktop: Make room for sidebar */
  @media (min-width: 1024px) {
    .app-content {
      margin-left: 280px;
    }
  }

  /* Mobile: Full width */
  @media (max-width: 1023px) {
    .app-content {
      margin-left: 0;
    }
  }
</style>
