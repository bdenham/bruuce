---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import SidebarSimple from '../components/SidebarSimple.astro';
import '../styles/theme.css';

export interface Props {
  title: string;
  description: string;
  showBackLink?: boolean;
  backLinkText?: string;
  backLinkHref?: string;
  footerText?: string;
  footerLinkText?: string;
  footerLinkHref?: string;
}

const {
  title,
  description,
  showBackLink = false,
  backLinkText = '‚Üê Back to Home',
  backLinkHref = '/',
  footerText = 'Thanks for visiting!',
  footerLinkText,
  footerLinkHref,
} = Astro.props;
---

<!doctype html>
<html lang="en" transition:auto>
  <head>
    <meta charset="utf-8" />
    <title>{title}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="description" content={description} />
    <meta name="color-scheme" content="dark light" />
    <!-- Performance optimizations -->
    <meta name="robots" content="index, follow" />
    <meta name="referrer" content="no-referrer-when-downgrade" />

    <!-- No font preloads - let CSS handle fonts for optimal performance -->
    <!-- Theme initialization only - fonts handled by static CSS -->
    <script is:inline>
      if (localStorage.getItem('theme') === 'light') {
        document.documentElement.classList.add('light');
      }
    </script>

    <style>
      :root {
        --bg-primary: #0f1419;
        --text-primary: #ffffff;
        --accent-primary: #00aaff;
      }
      :root.light {
        --bg-primary: #f7f3f0;
        --text-primary: #2d3748;
        --accent-primary: #0066cc;
      }
      body {
        margin: 0;
        background: var(--bg-primary);
        color: var(--text-primary);
        font-family:
          ui-sans-serif,
          system-ui,
          -apple-system,
          BlinkMacSystemFont,
          sans-serif;
        line-height: 1.6;
        font-size: 16px;
      }
      h1 {
        font-size: clamp(2.5rem, 8vw, 3.5rem);
        font-weight: 900;
        margin: 0 0 16px 0;
        line-height: 1.1;
      }
      h1 span {
        color: var(--accent-primary);
      }
      .skip-link {
        position: absolute;
        top: -40px;
        left: 6px;
        background: var(--accent-primary);
        color: white;
        padding: 8px;
        text-decoration: none;
        border-radius: 4px;
      }
      .skip-link:focus {
        top: 6px;
      }
    </style>

    <!-- CSS will be inlined by Astro for zero render-blocking -->

    <!-- Minimal theme initialization -->
    <script is:inline>
      if (localStorage.getItem('theme') === 'light') {
        document.documentElement.classList.add('light');
      }
    </script>
  </head>
  <body>
    <!-- Skip link for keyboard navigation -->
    <a href="#main-content" class="skip-link">Skip to main content</a>

    <div id="root">
      <SidebarSimple />
      <div class="app-content">
        <Header />
        <main class="main-container" id="main-content">
          <section class="content-panel">
            {
              showBackLink && (
                <div class="nav-back">
                  <a href={backLinkHref}>{backLinkText}</a>
                </div>
              )
            }
            <slot />
          </section>
          <Footer text={footerText} linkText={footerLinkText} linkHref={footerLinkHref} />
        </main>
      </div>
    </div>

    <script>
      function updateThemeDisplay(isLight) {
        const themeIcon = document.getElementById('theme-icon');
        const themeText = document.getElementById('theme-text');

        if (themeIcon && themeText) {
          if (isLight) {
            themeIcon.textContent = '‚òÄÔ∏è';
            themeText.textContent = 'Light';
          } else {
            themeIcon.textContent = 'üåô';
            themeText.textContent = 'Dark';
          }
        }
      }

      (window as any).toggleTheme = function () {
        const root = document.documentElement;
        const isCurrentlyLight = root.classList.contains('light');
        const colorScheme = document.querySelector('meta[name="color-scheme"]');

        // Add a brief transition class for smoother theme switching
        root.style.setProperty('--transition-duration', '300ms');

        if (isCurrentlyLight) {
          // Switch to dark
          root.classList.remove('light');
          localStorage.setItem('theme', 'dark');
          updateThemeDisplay(false);
          if (colorScheme) colorScheme.setAttribute('content', 'dark light');
        } else {
          // Switch to light
          root.classList.add('light');
          localStorage.setItem('theme', 'light');
          updateThemeDisplay(true);
          if (colorScheme) colorScheme.setAttribute('content', 'light dark');
        }

        // Remove the transition after it completes
        setTimeout(() => {
          root.style.removeProperty('--transition-duration');
        }, 300);
      };

      // Initialize theme on page load and after View Transitions
      function initTheme() {
        const savedTheme = localStorage.getItem('theme');
        const root = document.documentElement;
        const colorScheme = document.querySelector('meta[name="color-scheme"]');
        const isLight = savedTheme === 'light';

        if (isLight) {
          root.classList.add('light');
          if (colorScheme) colorScheme.setAttribute('content', 'light dark');
        } else {
          root.classList.remove('light');
          if (colorScheme) colorScheme.setAttribute('content', 'dark light');
        }

        updateThemeDisplay(isLight);
      }

      // Initialize theme when page loads
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initTheme);
      } else {
        initTheme();
      }

      // Re-initialize theme after View Transitions
      document.addEventListener('astro:after-swap', initTheme);
    </script>
  </body>
</html>

<style>
  /* Layout adjustments for sidebar */
  #root {
    display: flex;
    min-height: 100vh;
  }

  .app-content {
    flex: 1;
    margin-left: 200px;
  }

  .main-container {
    max-width: 900px;
    margin: 0 auto;
    padding: 80px 32px 32px 32px;
  }

  .content-panel {
    background: var(--bg-tertiary);
    backdrop-filter: saturate(120%) blur(8px);
    border-radius: 20px;
    padding: 40px;
    margin-bottom: 32px;
    border: 1px solid var(--border-secondary);
    box-shadow: 0 8px 32px var(--shadow-secondary);
  }

  .nav-back {
    margin-bottom: 24px;
  }

  .nav-back a {
    color: var(--accent-primary);
    text-decoration: none;
    font-weight: 500;
    display: inline-flex;
    align-items: center;
    gap: 4px;
    transition: color 0.2s ease;
  }

  .nav-back a:hover {
    color: var(--accent-hover);
  }

  /* Mobile and tablet responsive - align with sidebar breakpoint */
  @media (max-width: 1023px) {
    .app-content {
      margin-left: 0;
    }

    .main-container {
      padding: 60px 20px 20px 20px;
    }

    .content-panel {
      padding: 24px 20px;
    }
  }
</style>
// Force rebuild - CSS assets missing on Vercel
