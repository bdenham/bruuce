---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import SidebarPerformance from '../components/SidebarPerformance.astro';
import '../styles/theme.css';
import '../styles/semantic.css';

export interface Props {
  title: string;
  description: string;
  showBackLink?: boolean;
  backLinkText?: string;
  backLinkHref?: string;
  footerText?: string;
  footerLinkText?: string;
  footerLinkHref?: string;
}

const {
  title,
  description,
  showBackLink = false,
  backLinkText = '‚Üê Back to Home',
  backLinkHref = '/',
  footerText = 'Thanks for visiting!',
  footerLinkText,
  footerLinkHref,
} = Astro.props;
---

<!doctype html>
<html lang="en" class="2xl:text-[20px]">
  <head>
    <meta charset="utf-8" />
    <title>{title}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="description" content={description} />
    <meta name="color-scheme" content="dark light" />

    <!-- Bruce Denham Personal Branding Favicons -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg?v=2024" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico?v=2024" />
    <meta name="theme-color" content="#00aaff" />
    <!-- Performance optimizations -->
    <meta name="robots" content="index, follow" />
    <meta name="referrer" content="no-referrer-when-downgrade" />

    <!-- === OPTIMIZED SEO FOR BRUCE DENHAM === -->

    <!-- Essential SEO Meta Tags -->
    <meta name="author" content="Bruce Denham" />

    <!-- Open Graph Meta Tags for Social Sharing -->
    <meta property="og:type" content="website" />
    <meta property="og:site_name" content="Bruce Denham" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={`https://bruuce.com${Astro.url.pathname}`} />
    <meta property="og:image" content="https://bruuce.com/images/bruce-denham-headshot.jpg" />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta
      property="og:image:alt"
      content="Bruce Denham - Adobe Award-Nominated Technical Writer & Developer Experience Engineer"
    />
    <meta property="og:locale" content="en_US" />

    <!-- Twitter Card Meta Tags -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:creator" content="@brucedenham" />
    <meta name="twitter:site" content="@brucedenham" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content="https://bruuce.com/images/bruce-denham-headshot.jpg" />
    <meta
      name="twitter:image:alt"
      content="Bruce Denham - Adobe Award-Nominated Technical Writer"
    />

    <!-- Canonical URL -->
    <link rel="canonical" href={`https://bruuce.com${Astro.url.pathname}`} />

    <!-- Additional SEO Meta Tags -->
    <meta name="generator" content={Astro.generator} />
    <meta name="format-detection" content="telephone=no" />
    <meta name="geo.region" content="US" />
    <meta name="geo.position" content="30.2672;-97.7431" />
    <meta name="ICBM" content="30.2672, -97.7431" />
    <meta name="geo.placename" content="Austin, Texas" />

    <!-- Language and Content -->
    <meta name="language" content="en-US" />
    <meta name="content-language" content="en-US" />
    <meta name="rating" content="general" />

    <!-- Enhanced Keywords -->
    <meta
      name="keywords"
      content="Bruce Denham, Technical Writer, Developer Experience, Adobe, Documentation, API Documentation, SDK Documentation, CLI Tools, React, JavaScript, Node.js, Astro, Developer Tools, Austin Texas, Remote Work"
    />

    <!-- No font preloads - let CSS handle fonts for optimal performance -->

    <!-- Theme initialization only - fonts handled by static CSS -->
    <script is:inline>
      if (localStorage.getItem('theme') === 'light') {
        document.documentElement.classList.add('light');
      }
    </script>
    <style>
      :root {
        --bg-primary: #1a1b23; /* Softer dark gray, matches theme.css */
        --text-primary: #f1f3f4; /* Softer white, not harsh pure white */
        --accent-primary: #00aaff;
      }
      :root.light {
        --bg-primary: #f7f3f0;
        --text-primary: #2d3748;
        --accent-primary: #0066cc;
      }

      body {
        margin: 0;
        background: var(--bg-primary);
        color: var(--text-primary);
        font-family:
          ui-sans-serif,
          system-ui,
          -apple-system,
          BlinkMacSystemFont,
          sans-serif;
        line-height: 1.6;
        font-size: 1.125rem; /* 18px converted to rem */
      }

      h1 {
        font-size: clamp(3rem, 8vw, 4.5rem); /* Increased from 2.5rem-3.5rem to 3rem-4.5rem */
        font-weight: 900;
        margin: 0 0 16px 0;
        line-height: 1.1;
        color: var(--text-primary);
      }
      h1 span {
        color: var(--accent-primary);
      }

      .skip-link {
        position: absolute;
        top: -40px;
        left: 6px;
        background: var(--accent-primary);
        color: white;
        padding: 8px;
        text-decoration: none;
        border-radius: 4px;
      }
      .skip-link:focus {
        top: 6px;
      }
    </style>

    <!-- CSS will be inlined by Astro for zero render-blocking -->
  </head>
  <body>
    <!-- Skip link for keyboard navigation -->
    <a href="#main-content" class="skip-link">Skip to main content</a>

    <div id="root">
      <SidebarPerformance />
      <div class="app-content">
        <Header />
        <main class="main-container" id="main-content">
          <section class="content-panel">
            {
              showBackLink && (
                <div class="nav-back">
                  <a href={backLinkHref}>{backLinkText}</a>
                </div>
              )
            }
            <slot />
          </section>
          <Footer text={footerText} linkText={footerLinkText} linkHref={footerLinkHref} />
        </main>
      </div>
    </div>

    <script>
      function updateThemeDisplay(isLight) {
        const themeIcon = document.getElementById('theme-icon');
        const themeText = document.getElementById('theme-text');

        if (themeIcon && themeText) {
          if (isLight) {
            themeIcon.textContent = '‚òÄÔ∏è';
            themeText.textContent = 'Light';
          } else {
            themeIcon.textContent = 'üåô';
            themeText.textContent = 'Dark';
          }
        }
      }

      (window as any).toggleTheme = function () {
        const root = document.documentElement;
        const isCurrentlyLight = root.classList.contains('light');
        const colorScheme = document.querySelector('meta[name="color-scheme"]');

        // Add a brief transition class for smoother theme switching
        root.style.setProperty('--transition-duration', '300ms');

        if (isCurrentlyLight) {
          // Switch to dark
          root.classList.remove('light');
          localStorage.setItem('theme', 'dark');
          updateThemeDisplay(false);
          if (colorScheme) colorScheme.setAttribute('content', 'dark light');
        } else {
          // Switch to light
          root.classList.add('light');
          localStorage.setItem('theme', 'light');
          updateThemeDisplay(true);
          if (colorScheme) colorScheme.setAttribute('content', 'light dark');
        }

        // Remove the transition after it completes
        setTimeout(() => {
          root.style.removeProperty('--transition-duration');
        }, 300);
      };

      // Initialize theme on page load and after View Transitions
      function initTheme() {
        const savedTheme = localStorage.getItem('theme');
        const root = document.documentElement;
        const colorScheme = document.querySelector('meta[name="color-scheme"]');
        const isLight = savedTheme === 'light';

        if (isLight) {
          root.classList.add('light');
          if (colorScheme) colorScheme.setAttribute('content', 'light dark');
        } else {
          root.classList.remove('light');
          if (colorScheme) colorScheme.setAttribute('content', 'dark light');
        }

        updateThemeDisplay(isLight);
      }

      // Initialize theme when page loads
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initTheme);
      } else {
        initTheme();
      }

      // Re-initialize theme after View Transitions (with cleanup)
      let themeCleanup = null;

      function initThemeWithCleanup() {
        initTheme();

        // Store cleanup for theme listeners if needed
        if (themeCleanup) {
          themeCleanup();
        }

        // No additional cleanup needed for theme toggle as it's global
        themeCleanup = () => {
          // Theme toggle cleanup if needed in future
        };
      }

      document.addEventListener('astro:after-swap', initThemeWithCleanup);
    </script>

    <!-- JSON-LD Structured Data (non-blocking at bottom) -->
    <script type="application/ld+json">
      {
        "@context": "https://schema.org",
        "@type": ["Person", "ProfilePage"],
        "name": "Bruce Denham",
        "alternateName": "Bruuce",
        "jobTitle": "Senior Technical Writer & Developer Experience Engineer",
        "worksFor": {
          "@type": "Organization",
          "name": "Adobe",
          "url": "https://adobe.com",
          "sameAs": "https://en.wikipedia.org/wiki/Adobe_Inc."
        },
        "description": "Adobe award-nominated Senior Technical Writer & Developer Experience Engineer with 30+ years transforming complex technical concepts into clear developer experiences.",
        "url": "https://bruuce.com",
        "mainEntityOfPage": "https://bruuce.com",
        "sameAs": [
          "https://linkedin.com/in/brucedenham",
          "https://github.com/bdenham",
          "https://twitter.com/brucedenham"
        ],
        "knowsAbout": [
          "Technical Writing",
          "Developer Experience",
          "API Documentation",
          "SDK Documentation",
          "React Development",
          "CLI Tools",
          "Documentation Systems",
          "JavaScript",
          "Node.js",
          "Astro",
          "Developer Tools"
        ],
        "hasOccupation": {
          "@type": "Occupation",
          "name": "Technical Writer",
          "occupationLocation": {
            "@type": "Place",
            "name": "Remote"
          },
          "skills": ["Technical Writing", "Developer Experience", "API Documentation", "JavaScript"]
        },
        "alumniOf": [
          {
            "@type": "Organization",
            "name": "Schlumberger",
            "url": "https://www.slb.com"
          },
          {
            "@type": "Organization",
            "name": "TOPAZ"
          }
        ],
        "image": {
          "@type": "ImageObject",
          "url": "https://bruuce.com/images/bruce-denham-og-card.jpg",
          "width": "1200",
          "height": "630"
        },
        "award": "Adobe Award Nominee",
        "yearsOfExperience": "30+",
        "expertise": [
          "API Documentation",
          "SDK Documentation",
          "Developer Experience Strategy",
          "Technical Communication",
          "Documentation Architecture"
        ]
      }
    </script>
  </body>
</html>

<style>
  /* Layout adjustments for sidebar */
  #root {
    display: flex;
    min-height: 100vh;
  }

  .app-content {
    flex: 1;
    margin-left: 280px;
    transition: margin-left 0.3s ease;
  }

  .main-container {
    max-width: 1280px; /* AstroWind's max-w-7xl equivalent */
    margin: 0 auto;
    margin-left: 3rem; /* Better separation from sidebar */
    padding: 80px 1rem 2rem 1rem; /* Responsive padding like AstroWind */
  }
  
  /* AstroWind-style responsive padding */
  @media (min-width: 768px) {
    .main-container {
      padding: 80px 1.5rem 2rem 1.5rem; /* md:px-6 equivalent */
    }
  }

  .content-panel {
    /* Clean, borderless design - content flows naturally */
    background: transparent; /* No background - use page background */
    border: none; /* Remove border */
    border-radius: 0; /* Remove rounded corners */
    padding: 0; /* Remove padding - let content breathe naturally */
    margin-bottom: 32px;
    box-shadow: none; /* Remove shadow */
    /* Optimal line length for readability - left-aligned */
    max-width: 75ch; /* ~75 characters per line - more generous */
    margin-left: 0; /* Left-aligned, closer to sidebar */
    margin-right: auto;
  }

  .nav-back {
    margin-bottom: 24px;
  }

  .nav-back a {
    color: var(--accent-primary);
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 4px;
    font-weight: 500;
  }

  .nav-back a:hover {
    color: var(--accent-hover);
    text-decoration: underline;
  }

  /* Mobile and tablet responsive - align with sidebar breakpoint */
  @media (max-width: 1023px) {
    .app-content {
      margin-left: 0;
    }

    .main-container {
      margin-left: 0 !important; /* Remove left margin on mobile */
      padding: 80px 1rem 1.25rem 1rem; /* Responsive padding like AstroWind */
    }

    .content-panel {
      padding: 0; /* No padding - clean design */
    }
  }

  /* Sidebar collapsed state on mobile */
  .sidebar.collapsed ~ .app-content {
    margin-left: 0;
  }
</style>
