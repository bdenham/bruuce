---
interface Link {
  href: string;
  text: string;
  variant?: 'primary' | 'secondary';
  target?: string;
  rel?: string;
  icon?: string;
}

interface Tag {
  text: string;
  variant?: 'default' | 'primary' | 'accent';
}

interface Props {
  // Layout & Behavior
  variant?: 'content' | 'project' | 'simple';
  href?: string; // Makes entire card clickable
  target?: string;
  rel?: string;
  ariaLabel?: string;
  
  // Content
  icon?: string;
  title?: string;
  subtitle?: string;
  description?: string;
  content?: string; // For more complex HTML content
  
  // Metadata
  tags?: Tag[];
  status?: string; // For project status badges
  
  // Actions
  links?: Link[];
  primaryAction?: Link;
  
  // Styling
  featured?: boolean;
  background?: string;
  padding?: 'small' | 'medium' | 'large';
  
  // Animation
  animateIn?: boolean;
  animationDelay?: string; // e.g., "100", "200", "300" for animate-delay-{n} classes
}

const {
  variant = 'content',
  href,
  target,
  rel,
  ariaLabel,
  icon,
  title,
  subtitle,
  description,
  content,
  tags = [],
  status,
  links = [],
  primaryAction,
  featured = false,
  background,
  padding = 'medium',
  animateIn = false,
  animationDelay,
} = Astro.props;

// Determine if card should be clickable
const isClickable = href;
const CardElement = isClickable ? 'a' : 'div';
---

<div class={`unified-card-wrapper variant-${variant} ${featured ? 'featured' : ''} ${animateIn ? 'animate-in' : ''} ${animationDelay ? `animate-delay-${animationDelay}` : ''}`}>
  <CardElement
    class={`unified-card-link ${padding}`}
    href={isClickable ? href : undefined}
    target={isClickable ? target : undefined}
    rel={isClickable ? rel : undefined}
    aria-label={isClickable ? ariaLabel : undefined}
    style={`${background ? `background: ${background};` : ''}`}
  >
    <div class="card-content">
      {/* Content variant: Large icon on left, content on right */}
      {variant === 'content' && icon && (
        <div class="card-icon-large" aria-hidden="true">{icon}</div>
      )}
      
      <div class="card-main">
        <!-- Header section -->
        {(title || subtitle || status || tags.length > 0) && (
          <div class="card-header">
            <div class="card-title-section">
              {title && (
                <h3 class="card-title">
                  {/* Only show inline icon for non-content variants */}
                  {icon && variant !== 'content' && (
                    <span class="card-icon" aria-hidden="true">{icon}</span>
                  )}
                  {title}
                </h3>
              )}
              {subtitle && <div class="card-subtitle">{subtitle}</div>}
            </div>
          
          {status && <div class="card-status">{status}</div>}
          
          {tags.length > 0 && (
            <div class="card-tags">
              {tags.map(tag => (
                <span class={`tag ${tag.variant || 'default'}`}>{tag.text}</span>
              ))}
            </div>
          )}
        </div>
      )}

      <!-- Main content -->
      <div class="card-body">
        {description && <p class="card-description">{description}</p>}
        {content && <div class="card-content-html" set:html={content} />}
        
        <!-- Slot for custom content -->
        <slot />
      </div>

      <!-- Actions/Links section -->
      {(links.length > 0 || primaryAction) && (
        <div class="card-actions">
          {primaryAction && (
            <a
              href={primaryAction.href}
              class={`card-action primary ${primaryAction.variant || 'primary'}`}
              target={primaryAction.target}
              rel={primaryAction.rel}
            >
              {primaryAction.icon && <span class="action-icon">{primaryAction.icon}</span>}
              {primaryAction.text}
            </a>
          )}
          
          {links.map(link => (
            <a
              href={link.href}
              class={`card-action ${link.variant || 'secondary'}`}
              target={link.target}
              rel={link.rel}
            >
              {link.icon && <span class="action-icon">{link.icon}</span>}
              {link.text}
            </a>
          ))}
        </div>
      )}
      </div> <!-- Close card-main -->
    </div>
  </CardElement>
</div>

<style>
  /* Wrapper styles */
  .unified-card-wrapper {
    position: relative;
    margin-bottom: 1.5rem;
    height: 100%; /* Allow wrapper to stretch to full grid height */
    display: flex; /* Make wrapper a flex container */
    flex-direction: column; /* Stack children vertically */
  }

  /* Card link styles - matching BlogPostCard exactly */
  .unified-card-link {
    display: flex; /* Make card link a flex container */
    flex-direction: column; /* Stack children vertically */
    flex: 1; /* Take up all available height in wrapper */
    background: var(--bg-card);
    border: none;
    border-radius: 1rem;
    box-shadow: 0 2px 8px var(--shadow-secondary);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    text-decoration: none;
    color: inherit;
  }

  /* Padding variants */
  .unified-card-link.small { padding: 16px; }
  .unified-card-link.medium { padding: 24px; }
  .unified-card-link.large { padding: 32px; }

  /* Hover styles - matching BlogPostCard exactly */
  .unified-card-link:hover {
    background: var(--bg-card-hover);
    transform: translateY(-4px);
    box-shadow: 0 12px 24px var(--shadow-primary);
  }


  /* Variant: Content cards with large left icon */
  .variant-content .card-content {
    display: flex;
    flex-direction: row !important; /* Override default column direction */
    align-items: flex-start; /* Icon aligned to top of content */
    gap: 1rem;
  }

  .variant-content .card-icon-large {
    font-size: 2.5rem;
    line-height: 1;
    flex-shrink: 0;
    /* Icon stays at top-left of card content */
  }

  .variant-content .card-main {
    flex: 1;
    min-width: 0; /* Allow text to wrap */
  }

  .variant-content .card-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-primary);
    margin: 0; /* Reduced from 12px to 6px */
    line-height: 1.4;
  }

  .variant-content .card-description {
    color: var(--text-tertiary);
    font-size: 1rem;
    line-height: 1.6;
    margin: 0;
  }

  /* Variant: Project cards */
  .variant-project .card-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 16px;
    flex-wrap: wrap;
    gap: 12px;
  }

  .variant-project .card-title {
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--text-primary);
    margin: 0;
    line-height: 1.3;
  }

  .variant-project .card-description {
    color: var(--text-tertiary);
    font-size: 1rem;
    line-height: 1.6;
    margin-bottom: 20px;
  }

  /* Variant: Simple cards */
  .variant-simple {
    padding: 16px;
    border: none;
    background: transparent;
  }

  .variant-simple:hover {
    background: var(--bg-card);
    transform: none;
    box-shadow: none;
  }


  /* Featured cards */
  .featured {
    border-color: var(--accent-primary);
    background: linear-gradient(135deg, var(--bg-card) 0%, var(--accent-content) 100%);
  }

  /* Card components */
  .card-content {
    flex: 1; /* Take up all available height */
    min-width: 0;
    display: flex;
    flex-direction: column;
  }

  .card-header {
    margin-bottom: 8px;
  }

  .card-title-section {
    flex: 1;
  }

  .card-subtitle {
    font-size: 0.875rem;
    color: var(--text-secondary);
    margin-top: 4px;
  }

  .card-status {
    padding: 4px 8px;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 600;
    background: var(--bg-card);
    color: var(--accent-primary);
    border: 1px solid var(--accent-primary);
    white-space: nowrap;
  }

  .card-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    margin-top: 12px;
  }

  .tag {
    padding: 4px 12px;
    border-radius: 16px;
    font-size: 0.75rem;
    font-weight: 600;
    background: var(--tag-bg);
    color: var(--tag-text);
    border: 1px solid var(--border-primary);
  }

  .tag.primary {
    background: var(--accent-content);
    color: var(--accent-content-text);
    border-color: var(--accent-content);
  }

  .tag.accent {
    background: var(--accent-primary);
    color: var(--bg-primary);
    border-color: var(--accent-primary);
  }

  .card-body {
    flex: 1; /* Take up remaining space, pushing actions to bottom */
    margin-bottom: 16px;
  }

  .card-body:last-child {
    margin-bottom: 0;
  }

  .card-actions {
    display: flex;
    gap: 12px;
    flex-wrap: wrap;
    margin-top: 20px;
    padding-top: 20px;
    border-top: 1px solid var(--border-secondary);
  }

  .card-action {
    display: inline-flex;
    align-items: center;
    gap: 6px;
    padding: 8px 16px;
    border-radius: 8px;
    font-size: 1rem;
    font-weight: 600;
    text-decoration: none;
    transition: all 0.3s ease;
    border: 1px solid var(--border-secondary);
    background: var(--bg-secondary);
    color: var(--text-secondary);
  }

  .card-action:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px var(--shadow-secondary);
    border-color: var(--border-primary);
    color: var(--text-primary);
  }

  .card-action.primary {
    background: var(--accent-primary);
    color: var(--bg-primary);
    border-color: var(--accent-primary);
  }

  .card-action.primary:hover {
    background: var(--accent-hover);
    color: var(--bg-primary);
    border-color: var(--accent-hover);
  }

  .action-icon {
    font-size: 0.875rem;
  }

  /* Animation support is provided by global animations.css */

  /* Responsive adjustments */
  @media (max-width: 640px) {
    .variant-action {
      flex-direction: column;
      text-align: center;
      gap: 16px;
    }

    .variant-action .card-icon {
      font-size: 2rem;
    }

    .variant-project .card-header {
      flex-direction: column;
      align-items: flex-start;
    }

    .card-actions {
      flex-direction: column;
    }

    .card-action {
      justify-content: center;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .unified-card {
      transition: none;
    }
    /* Animation reduced motion is handled by global animations.css */
  }
</style>
