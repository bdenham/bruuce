---
interface Props {
  caption?: string;
  width?: string;
  type?: 'image' | 'mermaid';
  code?: string;
  alt?: string;
}

const { caption, width = '100%', type = 'image', code, alt = 'Diagram' } = Astro.props;
const diagramId = `diagram-${Math.random().toString(36).substr(2, 9)}`;
---

<figure class="diagram-figure" style={`width: ${width};`}>
  <div class="diagram-container" data-diagram-type={type}>
    <div class="diagram-content">
      {type === 'mermaid' ? (
        <div id={diagramId} class="mermaid-diagram" data-mermaid-code={code}>
          <div class="diagram-loading">
            <div class="loading-spinner"></div>
            <p>Rendering diagram...</p>
          </div>
        </div>
      ) : (
        <div class="image-diagram">
          <slot />
        </div>
      )}
    </div>
    {caption && (
      <figcaption class="diagram-caption">
        {caption}
      </figcaption>
    )}
  </div>
</figure>

{type === 'mermaid' && (
  <script define:vars={{ diagramId, code, alt }}>
    // Load Mermaid library dynamically (local version)
    async function loadMermaid() {
      if (window.mermaid) return window.mermaid;
      
      try {
        // Use bundled mermaid instead of CDN for better performance
        const mermaidModule = await import('mermaid');
        const mermaid = mermaidModule.default;
        
        // Configure mermaid with theme-aware colors
        const isDark = !document.documentElement.classList.contains('light');
        
        mermaid.initialize({
          startOnLoad: false,
          theme: isDark ? 'dark' : 'base',
          themeVariables: {
            primaryColor: isDark ? '#a78bfa' : '#7c3aed',
            primaryTextColor: isDark ? '#ffffff' : '#1e293b',
            primaryBorderColor: isDark ? '#6366f1' : '#8b5cf6',
            lineColor: isDark ? '#64748b' : '#94a3b8',
            secondaryColor: isDark ? '#1e293b' : '#f1f5f9',
            tertiaryColor: isDark ? '#334155' : '#e2e8f0',
            background: isDark ? '#0f172a' : '#ffffff',
            mainBkg: isDark ? '#1e293b' : '#f8fafc',
            secondBkg: isDark ? '#334155' : '#f1f5f9'
          },
          fontFamily: 'ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, sans-serif',
          fontSize: 14
        });
        
        window.mermaid = mermaid;
        return mermaid;
      } catch (error) {
        console.error('Failed to load Mermaid:', error);
        throw error;
      }
    }

    async function renderMermaidDiagram() {
      const diagramElement = document.getElementById(diagramId);
      if (!diagramElement || !code) {
        console.error('Missing diagram element or code');
        return;
      }

      try {
        const mermaid = await loadMermaid();
        
        // Create a temporary container for rendering
        const tempId = `temp-${diagramId}`;
        const { svg } = await mermaid.render(tempId, code);
        
        // Create clickable image element
        const img = document.createElement('img');
        const svgBlob = new Blob([svg], { type: 'image/svg+xml' });
        const svgUrl = URL.createObjectURL(svgBlob);
        
        img.src = svgUrl;
        img.alt = alt;
        img.className = 'diagram-image clickable';
        img.style.cssText = `
          max-width: 100%;
          height: auto;
          display: block;
          cursor: zoom-in;
          transition: transform 0.2s ease;
        `;
        
        // Add hover effect
        img.addEventListener('mouseenter', () => {
          img.style.transform = 'scale(1.02)';
        });
        
        img.addEventListener('mouseleave', () => {
          img.style.transform = 'scale(1)';
        });
        
        // Add click to zoom functionality
        // Make image keyboard accessible
        img.tabIndex = 0;
        img.setAttribute('role', 'button');
        img.setAttribute('aria-label', `View ${alt} in full screen. Press Enter or Space to open.`);
        
        const openModal = () => openDiagramModal(svgUrl, alt);
        
        img.addEventListener('click', openModal);
        img.addEventListener('keydown', (e) => {
          if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            openModal();
          }
        });
        
        // Replace loading with rendered diagram
        diagramElement.innerHTML = '';
        diagramElement.appendChild(img);
        
        // Clean up blob URL when page unloads
        window.addEventListener('beforeunload', () => {
          URL.revokeObjectURL(svgUrl);
        });
        
      } catch (error) {
        console.error('Error rendering Mermaid diagram:', error);
        diagramElement.innerHTML = `
          <div class="diagram-error">
            <div class="error-icon">⚠️</div>
            <p>Failed to render diagram</p>
            <details>
              <summary>Error details</summary>
              <pre>${error.message}</pre>
            </details>
          </div>
        `;
      }
    }

    function openDiagramModal(imageSrc, imageAlt) {
      const modal = document.createElement('div');
      modal.className = 'diagram-modal';
      modal.setAttribute('role', 'dialog');
      modal.setAttribute('aria-modal', 'true');
      modal.setAttribute('aria-labelledby', 'diagram-modal-title');
      modal.setAttribute('aria-describedby', 'diagram-modal-desc');
      
      modal.innerHTML = `
        <div class="diagram-modal-backdrop">
          <div class="diagram-modal-content">
            <h2 id="diagram-modal-title" class="sr-only">Diagram Viewer</h2>
            <p id="diagram-modal-desc" class="sr-only">Press Escape or click the X to close this dialog</p>
            <button class="diagram-modal-close" aria-label="Close diagram viewer dialog">×</button>
            <img src="${imageSrc}" alt="${imageAlt}" class="diagram-modal-image" />
          </div>
        </div>
      `;
      
      // Apply modal styles
      modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        z-index: 10000;
        display: flex;
        align-items: center;
        justify-content: center;
        background: rgba(0, 0, 0, 0);
        transition: background 0.3s ease;
      `;
      
      const backdrop = modal.querySelector('.diagram-modal-backdrop');
      backdrop.style.cssText = `
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: zoom-out;
        padding: 2rem;
        box-sizing: border-box;
      `;
      
      const content = modal.querySelector('.diagram-modal-content');
      content.style.cssText = `
        position: relative;
        max-width: 95vw;
        max-height: 95vh;
        background: var(--bg-tertiary);
        border: 1px solid var(--border-primary);
        border-radius: 12px;
        padding: 2rem;
        box-shadow: 0 20px 40px var(--shadow-primary);
        backdrop-filter: blur(8px);
        transform: scale(0.8);
        transition: transform 0.3s ease;
        overflow: hidden;
      `;
      
      const modalImg = modal.querySelector('.diagram-modal-image');
      modalImg.style.cssText = `
        width: 100%;
        height: 100%;
        max-width: 100%;
        max-height: 100%;
        object-fit: contain;
        display: block;
        background: var(--bg-primary);
        border-radius: 4px;
      `;
      
      const closeBtn = modal.querySelector('.diagram-modal-close');
      closeBtn.style.cssText = `
        position: absolute;
        top: 16px;
        right: 16px;
        width: 40px;
        height: 40px;
        border: none;
        border-radius: 50%;
        background: var(--bg-card);
        border: 2px solid var(--border-primary);
        color: var(--text-primary);
        font-size: 24px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1;
        transition: all 0.2s ease;
      `;
      
      // Event handlers
      const closeModal = () => {
        modal.style.background = 'rgba(0, 0, 0, 0)';
        content.style.transform = 'scale(0.8)';
        setTimeout(() => {
          if (modal.parentNode) {
            document.body.removeChild(modal);
          }
        }, 300);
      };
      
      closeBtn.addEventListener('click', closeModal);
      backdrop.addEventListener('click', (e) => {
        if (e.target === backdrop) closeModal();
      });
      
      document.addEventListener('keydown', function escHandler(e) {
        if (e.key === 'Escape') {
          document.removeEventListener('keydown', escHandler);
          closeModal();
        }
      });
      
      closeBtn.addEventListener('mouseenter', () => {
        closeBtn.style.background = 'var(--bg-card-hover)';
        closeBtn.style.transform = 'scale(1.1)';
      });
      
      closeBtn.addEventListener('mouseleave', () => {
        closeBtn.style.background = 'var(--bg-card)';
        closeBtn.style.transform = 'scale(1)';
      });
      
      // Show modal
      document.body.appendChild(modal);
      requestAnimationFrame(() => {
        modal.style.background = 'rgba(0, 0, 0, 0.8)';
        content.style.transform = 'scale(1)';
      });
    }

    // Lazy load diagram only when it comes into view for better performance
    function initializeDiagram() {
      if (typeof IntersectionObserver !== 'undefined') {
        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              renderMermaidDiagram();
              observer.disconnect();
            }
          });
        }, { 
          rootMargin: '100px', // Load 100px before it comes into view
          threshold: 0.1 // Trigger when 10% visible
        });
        
        const diagramContainer = document.getElementById(diagramId)?.closest('.diagram-container');
        if (diagramContainer) {
          observer.observe(diagramContainer);
        }
      } else {
        // Fallback for browsers without IntersectionObserver
        renderMermaidDiagram();
      }
    }

    // Initialize lazy loading when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initializeDiagram);
    } else {
      initializeDiagram();
    }
  </script>
)}

{type === 'image' && (
  <script define:vars={{ diagramId, alt }}>
    document.addEventListener('DOMContentLoaded', () => {
      const diagramContainer = document.querySelector(`#${diagramId}`)?.closest('.diagram-container');
      const images = diagramContainer?.querySelectorAll('.image-diagram img');
      
      if (!images) return;
      
      images.forEach(img => {
        img.style.cursor = 'zoom-in';
        img.style.transition = 'transform 0.2s ease';
        
        img.addEventListener('mouseenter', () => {
          img.style.transform = 'scale(1.02)';
        });
        
        img.addEventListener('mouseleave', () => {
          img.style.transform = 'scale(1)';
        });
        
        // Make image keyboard accessible
        img.tabIndex = 0;
        img.setAttribute('role', 'button');
        img.setAttribute('aria-label', `View ${img.alt || alt} in full screen. Press Enter or Space to open.`);
        
        const openModalHandler = () => {
          const modal = document.createElement('div');
          modal.className = 'diagram-modal';
          
          modal.innerHTML = `
            <div class="diagram-modal-backdrop">
              <div class="diagram-modal-content">
                <button class="diagram-modal-close" aria-label="Close image">×</button>
                <img src="${img.src}" alt="${img.alt || alt}" class="diagram-modal-image" />
              </div>
            </div>
          `;
          
          // Apply same modal styles as mermaid
          modal.style.cssText = `
            position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; z-index: 10000;
            display: flex; align-items: center; justify-content: center;
            background: rgba(0, 0, 0, 0); transition: background 0.3s ease;
          `;
          
          const backdrop = modal.querySelector('.diagram-modal-backdrop');
          backdrop.style.cssText = `
            width: 100%; height: 100%; display: flex; align-items: center; justify-content: center;
            cursor: zoom-out; padding: 2rem; box-sizing: border-box;
          `;
          
          const content = modal.querySelector('.diagram-modal-content');
          content.style.cssText = `
            position: relative; max-width: 95vw; max-height: 95vh;
            background: var(--bg-tertiary); border: 1px solid var(--border-primary);
            border-radius: 12px; padding: 2rem; box-shadow: 0 20px 40px var(--shadow-primary);
            backdrop-filter: blur(8px); transform: scale(0.8); transition: transform 0.3s ease;
            overflow: hidden;
          `;
          
          const modalImg = modal.querySelector('.diagram-modal-image');
          modalImg.style.cssText = `
            width: 100%; height: 100%; max-width: 100%; max-height: 100%;
            object-fit: contain; display: block; background: var(--bg-primary); border-radius: 4px;
          `;
          
          const closeBtn = modal.querySelector('.diagram-modal-close');
          closeBtn.style.cssText = `
            position: absolute; top: 16px; right: 16px; width: 40px; height: 40px;
            border: none; border-radius: 50%; background: var(--bg-card);
            border: 2px solid var(--border-primary); color: var(--text-primary);
            font-size: 24px; cursor: pointer; display: flex; align-items: center;
            justify-content: center; z-index: 1; transition: all 0.2s ease;
          `;
          
          const closeModal = () => {
            // Return focus to the element that triggered the modal
            const triggerElement = document.activeElement;
            modal.style.background = 'rgba(0, 0, 0, 0)';
            content.style.transform = 'scale(0.8)';
            setTimeout(() => {
              document.body.removeChild(modal);
              // Return focus to the image that opened the modal
              if (triggerElement && triggerElement !== document.body) {
                (triggerElement as HTMLElement).focus();
              }
            }, 300);
          };
          
          // Focus management
          const focusableElements = modal.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
          const firstFocusableElement = focusableElements[0] as HTMLElement;
          const lastFocusableElement = focusableElements[focusableElements.length - 1] as HTMLElement;
          
          // Focus the close button when modal opens
          setTimeout(() => firstFocusableElement?.focus(), 100);
          
          // Trap focus within modal
          modal.addEventListener('keydown', (e) => {
            if (e.key === 'Tab') {
              if (e.shiftKey) {
                if (document.activeElement === firstFocusableElement) {
                  e.preventDefault();
                  lastFocusableElement?.focus();
                }
              } else {
                if (document.activeElement === lastFocusableElement) {
                  e.preventDefault();
                  firstFocusableElement?.focus();
                }
              }
            }
            if (e.key === 'Escape') {
              closeModal();
            }
          });
          
          closeBtn.addEventListener('click', closeModal);
          backdrop.addEventListener('click', (e) => { if (e.target === backdrop) closeModal(); });
          
          closeBtn.addEventListener('mouseenter', () => {
            closeBtn.style.background = 'var(--bg-card-hover)'; closeBtn.style.transform = 'scale(1.1)';
          });
          closeBtn.addEventListener('mouseleave', () => {
            closeBtn.style.background = 'var(--bg-card)'; closeBtn.style.transform = 'scale(1)';
          });
          
          document.body.appendChild(modal);
        };
        
        img.addEventListener('click', openModalHandler);
        img.addEventListener('keydown', (e) => {
          if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            openModalHandler();
          }
        });
          requestAnimationFrame(() => {
            modal.style.background = 'rgba(0, 0, 0, 0.8)';
            content.style.transform = 'scale(1)';
          });
        });
      });
    });
  </script>
)}

<style>
  .diagram-figure {
    margin: 2rem 0;
    padding: 0;
    max-width: 100%;
  }

  .diagram-container {
    background: var(--bg-card);
    border: 1px solid var(--border-secondary);
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 12px var(--shadow-secondary);
    transition: all 0.2s ease;
  }
  
  .diagram-container:hover {
    border-color: var(--border-primary);
    box-shadow: 0 6px 20px var(--shadow-primary);
  }

  .diagram-content {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 200px;
    padding: 1rem;
    background: var(--bg-primary);
  }

  .image-diagram {
    width: 100%;
    text-align: center;
  }

  .image-diagram img {
    max-width: 100%;
    height: auto;
    border-radius: 4px;
  }

  .mermaid-diagram {
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    font-family: ui-sans-serif, system-ui, sans-serif;
  }
  
  .diagram-image {
    max-width: 100%;
    height: auto;
    display: block;
    border-radius: 4px;
  }

  .diagram-loading {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
    color: var(--text-muted);
    padding: 2rem;
  }

  .loading-spinner {
    width: 32px;
    height: 32px;
    border: 3px solid var(--border-secondary);
    border-top: 3px solid var(--accent-primary);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  .diagram-loading p {
    margin: 0;
    font-size: 0.875rem;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .diagram-error {
    text-align: center;
    color: var(--text-muted);
    padding: 2rem;
  }

  .diagram-error .error-icon {
    font-size: 2rem;
    margin-bottom: 1rem;
  }

  .diagram-error p {
    margin: 0 0 1rem 0;
    color: var(--text-secondary);
  }

  .diagram-error details {
    margin-top: 1rem;
    text-align: left;
  }

  .diagram-error summary {
    color: var(--accent-primary);
    cursor: pointer;
    font-size: 0.875rem;
  }

  .diagram-error pre {
    background: var(--bg-tertiary);
    border: 1px solid var(--border-secondary);
    border-radius: 4px;
    padding: 0.75rem;
    margin-top: 0.5rem;
    font-size: 0.75rem;
    color: var(--text-muted);
    overflow-x: auto;
  }

  .diagram-caption {
    padding: 0.75rem 1rem;
    margin: 0;
    font-size: 0.875rem;
    font-style: italic;
    line-height: 1.4;
    color: var(--text-muted);
    background: var(--bg-tertiary);
    border-top: 1px solid var(--border-secondary);
  }

  /* Responsive adjustments */
  @media (max-width: 640px) {
    .diagram-container {
      border-radius: 6px;
    }
    
    .diagram-content {
      padding: 0.75rem;
    }
    
    .diagram-caption {
      padding: 0.5rem 0.75rem;
      font-size: 0.8rem;
    }
  }

  @media print {
    .diagram-container {
      border: 1px solid #ccc;
      box-shadow: none;
      background: white;
    }
    
    .diagram-content {
      background: white;
    }
    
    .diagram-caption {
      background: #f5f5f5;
      color: #666;
    }
  }
</style>