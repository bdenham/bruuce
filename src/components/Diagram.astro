---
const { caption, width, type = "image", code } = Astro.props;
const id = `diagram-${Math.random().toString(36).substr(2, 9)}`;
---

<div class="diagram" data-diagram-type={type}>
  <div class="diagram-content">
    {type === "mermaid" ? (
      <div id={id} class="mermaid-diagram" data-mermaid-code={code}>
        <div class="mermaid-loading">Loading diagram...</div>
      </div>
    ) : (
      <slot />
    )}
  </div>
  <div class="caption">{caption}</div>
</div>

{type === "mermaid" && (
  <script define:vars={{ id, code }}>
    // Mermaid rendering script
    async function renderMermaidDiagram() {
      const diagramElement = document.getElementById(id);
      if (!diagramElement) {
        console.error('Diagram element not found:', id);
        return;
      }
      
      if (!code) {
        console.error('No mermaid code provided');
        return;
      }
      
      try {
        console.log('Loading mermaid for diagram:', id);
        
        // Import mermaid dynamically - use latest version for newest syntax support
        const { default: mermaid } = await import('https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs');
        
        console.log('Mermaid loaded, initializing...');
        
        // Initialize mermaid with explicit font to prevent text clipping
        mermaid.initialize({
          startOnLoad: false,
          theme: 'default',
          securityLevel: 'loose',
          fontFamily: 'Arial, sans-serif'
        });
        
        console.log('Rendering mermaid diagram...');
        
        // Generate SVG
        const { svg } = await mermaid.render(`${id}-svg`, code);
        
        console.log('Mermaid diagram rendered successfully');
        console.log('SVG content preview:', svg.substring(0, 200) + '...');
        
        // Parse and enhance the SVG for better zoom behavior
        const parser = new DOMParser();
        const svgDoc = parser.parseFromString(svg, 'image/svg+xml');
        const svgElement = svgDoc.querySelector('svg');
        
        if (svgElement) {
          // Get original dimensions for aspect ratio calculation
          const originalViewBox = svgElement.getAttribute('viewBox');
          const originalWidth = svgElement.getAttribute('width');
          const originalHeight = svgElement.getAttribute('height');
          
          console.log('Original SVG attributes:', {
            viewBox: originalViewBox,
            width: originalWidth,
            height: originalHeight
          });
          
          // Set large fixed dimensions like the working SVG images
          // But preserve aspect ratio for sequence diagrams which can be very wide
          let targetWidth = 1920;
          let targetHeight = 1080;
          
          if (originalViewBox) {
            const [, , vbWidth, vbHeight] = originalViewBox.split(' ').map(Number);
            const aspectRatio = vbWidth / vbHeight;
            
            // If it's a very wide diagram (like sequence diagrams), adjust dimensions
            if (aspectRatio > 2) {
              targetHeight = Math.round(targetWidth / aspectRatio);
            }
          }
          
          console.log('Setting target dimensions:', { targetWidth, targetHeight });
          
          svgElement.setAttribute('width', targetWidth.toString());
          svgElement.setAttribute('height', targetHeight.toString());
        }
        
        // Convert enhanced SVG to blob URL
        const enhancedSvg = new XMLSerializer().serializeToString(svgDoc);
        const svgBlob = new Blob([enhancedSvg], { type: 'image/svg+xml' });
        const svgUrl = URL.createObjectURL(svgBlob);
        
        // Create the same structure as working images
        const zoomableWrapper = document.createElement('starlight-image-zoom-zoomable');
        
        const img = document.createElement('img');
        img.src = svgUrl;
        img.alt = 'Mermaid diagram';
        
        // Set the calculated dimensions on the img element
        const finalWidth = svgElement?.getAttribute('width') || '1920';
        const finalHeight = svgElement?.getAttribute('height') || '1080';
        img.setAttribute('width', finalWidth);
        img.setAttribute('height', finalHeight);
        
        img.style.cssText = `
          max-width: 100%;
          height: auto;
          display: block;
        `;
        
        // Create zoom button like the working images
        const zoomButton = document.createElement('button');
        zoomButton.setAttribute('aria-label', 'Zoom image: Mermaid diagram');
        zoomButton.className = 'starlight-image-zoom-control';
        zoomButton.innerHTML = `
          <svg aria-hidden="true" fill="currentColor" viewBox="0 0 24 24">
            <use href="#starlight-image-zoom-icon-zoom"></use>
          </svg>
        `;
        
        // Assemble the structure
        zoomableWrapper.appendChild(img);
        zoomableWrapper.appendChild(zoomButton);
        
        // Replace loading with the zoomable wrapper
        diagramElement.innerHTML = '';
        diagramElement.appendChild(zoomableWrapper);
        
        console.log('Zoom structure created:', {
          hasZoomableWrapper: !!zoomableWrapper,
          hasImg: !!img,
          hasZoomButton: !!zoomButton,
          imgSrc: img.src?.substring(0, 50) + '...',
          imgWidth: img.getAttribute('width'),
          imgHeight: img.getAttribute('height')
        });
        
        // Store the enhanced SVG content for modal use and manage blob URL lifecycle
        img.dataset.svgContent = enhancedSvg;
        
        // Don't revoke the blob URL immediately - keep it for the zoom modal
        img.onload = () => {
          // The blob URL needs to stay alive for the zoom modal to work
          // We'll clean it up when the page unloads or navigates
          window.addEventListener('beforeunload', () => {
            URL.revokeObjectURL(svgUrl);
          });
          
          // Also clean up on Astro page navigation
          document.addEventListener('astro:before-preparation', () => {
            URL.revokeObjectURL(svgUrl);
          });
        };
        
      } catch (error) {
        console.error('Error rendering mermaid diagram:', error);
        diagramElement.innerHTML = `<div style="color: red; padding: 1rem; border: 1px solid red;">Error: ${error.message}</div>`;
      }
    }
    
    // Wait for DOM to be ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', renderMermaidDiagram);
    } else {
      renderMermaidDiagram();
    }
    
    // Also handle Astro page transitions
    document.addEventListener('astro:page-load', renderMermaidDiagram);
  </script>
)}

<style define:vars={{ imageWidth: width }} is:global>
  .diagram {
    margin: 1rem 0;
    display: flex;
    flex-direction: column;
    border-radius: 0.5rem;
    border: 1px solid var(--sl-color-gray-4);
    box-shadow: var(--sl-shadow-sm);
    background-color: #fff;
  }

  .diagram-content {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 1rem;
    overflow: hidden;
  }

  .diagram.diagram > .diagram-content > p {
    margin: 0;
    font-size: 0;
    line-height: 0;
    width: 100%;
  }

  .diagram.diagram img {
    width: 100%;
    height: 100%;
    max-width: 100%;
    object-fit: contain;
  }

  .caption.caption {
    font-size: 1rem;
    font-style: italic;
    line-height: normal;
    padding: 0.75rem;
    margin: 0;
    color: var(--sl-color-gray-2);
    background-color: var(--sl-color-gray-6);
    border-top: 1px solid var(--sl-color-gray-4);
  }

  @media screen and (max-width: 600px) {
    .caption.caption {
      padding: 0.15rem 0.5rem;
    }
  }

  /* Mermaid-specific styles */
  .mermaid-diagram {
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    font-family: Arial, sans-serif;
  }
  
  .mermaid-diagram svg {
    max-width: 100%;
    height: auto;
    display: block;
  }
  
  .mermaid-loading {
    padding: 2rem;
    color: var(--sl-color-gray-2);
    font-style: italic;
  }

  @media print {
    .diagram.diagram {
      border: none;
      box-shadow: none;
      background-color: #fff;
    }
  }
</style>
