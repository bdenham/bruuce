---
import { Code } from '@astrojs/starlight/components';
import Icon from '@components/overrides/Icon.astro';

export interface Props {
  code: string;
  lang?: string;
  meta?: string;
  locale?: string;
  title?: string;
  frame?: 'none';
  mark?: string;
  ins?: string;
  del?: string;
  collapse?: string;
  collapsePreserveIndent?: true;
  showLineNumbers?: false;
  startLineNumber?: 1;
  wrap?: false;
  preserveIndent?: true;
}

type IconName = 'html' | 'css' | 'js' | 'ts' | 'graphql';

const cssBackgroundColor = 'var(--sl-color-blue-low)';
const cssBorderColor = 'var(--sl-color-blue)';

const htmlBackgroundColor = 'var(--sl-color-orange-low)';
const htmlBorderColor = 'var(--sl-color-orange)';

const jsBackgroundColor = 'var(--sl-color-yellow-low)';
const jsBorderColor = 'var(--sl-color-yellow)';

const graphqlBackgroundColor = 'var(--sl-color-pink-low)';
const graphqlBorderColor = 'var(--sl-color-pink)';

const defaultBackgroundColor = 'var(--sl-color-black)';
const defaultBorderColor = 'var(--sl-color-gray-3)';

const props = Astro.props;

// Function to dynamically select colors based on props.lang
function getColors(lang: string) {
  switch (lang) {
    case 'html':
      return {
        backgroundColor: htmlBackgroundColor,
        borderColor: htmlBorderColor,
      };
    case 'css':
      return {
        backgroundColor: cssBackgroundColor,
        borderColor: cssBorderColor,
      };
    case 'js':
      return {
        backgroundColor: jsBackgroundColor,
        borderColor: jsBorderColor,
      };
    case 'ts':
      return {
        backgroundColor: cssBackgroundColor,
        borderColor: cssBorderColor,
      };
    case 'graphql':
      return {
        backgroundColor: graphqlBackgroundColor,
        borderColor: graphqlBorderColor,
      };
    default:
      return {
        backgroundColor: defaultBackgroundColor,
        borderColor: defaultBorderColor,
      };
  }
}

const { backgroundColor, borderColor } = getColors(props.lang || 'default');
const codeIcon = props.lang || 'terminal';
---

<details class="code-block" style={`border: 1px solid ${borderColor};`}>
  <summary class="toggle-button flex" style={`background-color: ${backgroundColor};`}>
    <Icon name={codeIcon as IconName} size="1.5rem" label={props.lang} title={props.lang} />
    <span class="summary-text">{props.title}</span>
  </summary>
  <div id="code-block" class="code-block">
    <Code {...props} />
  </div>
</details>

<style>
  .summary-text {
    display: flex;
    align-items: center;
    margin-left: 0.5rem;
    font-size: 1rem;
    font-weight: 600;
    color: var(--sl-color-white);
  }
  details.code-block {
    margin: 0;
    border-radius: 5px;
    overflow: hidden;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  .code-block {
    margin-top: 0 !important;
    margin-bottom: 0 !important;
  }

  .collapsible-section {
    border-radius: 5px;
    overflow: hidden;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  collapsible-section:before {
    border-width: 0.4rem;
    border-style: solid;
    border-color: transparent transparent transparent #fff;
    position: absolute;
    top: 1.3rem;
    left: 0rem;
    transform: rotate(0);
    transform-origin: 0.25rem 50%;
    transition: 0.25s transform ease;
  }

  .toggle-button {
    display: flex;
    padding: 0.75rem;
    gap: 0;
    color: var(--sl-color-white);
    font-family: var(--sl-font-system);
    font-size: 17px;
    font-weight: 600;
    text-align: left;
    width: 100%;
    border: none;
    cursor: pointer;
    outline: none;
    transition: background-color 0.3s ease;
  }
</style>
