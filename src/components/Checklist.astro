---
interface Props {
  checklistKey: string;
  title?: string;
  showProgress?: boolean;
}

const { checklistKey, title, showProgress = true } = Astro.props;
const checklistId = `checklist-${checklistKey}-${Math.random().toString(36).substr(2, 9)}`;
---

<div class="checklist-container" id={checklistId} data-checklist-key={checklistKey}>
  {title && <h3 class="checklist-title">{title}</h3>}
  <div class="checklist-content">
    <slot />
  </div>
  {
    showProgress && (
      <div class="progress-container">
        <div class="progress-bar">
          <div class="progress-fill" />
        </div>
        <div class="progress-text">
          <span class="progress-count">0 of 0</span> completed
        </div>
      </div>
    )
  }
</div>

<script define:vars={{ checklistId, checklistKey, showProgress }}>
  // Simple progress storage utility
  class ChecklistStore {
    static getKey(checklistKey) {
      return `checklist-${checklistKey}`;
    }

    static getProgress(checklistKey) {
      try {
        const stored = localStorage.getItem(this.getKey(checklistKey));
        return stored ? JSON.parse(stored) : {};
      } catch {
        return {};
      }
    }

    static setProgress(checklistKey, itemId, checked) {
      try {
        const progress = this.getProgress(checklistKey);
        progress[itemId] = checked;
        localStorage.setItem(this.getKey(checklistKey), JSON.stringify(progress));
      } catch (error) {
        console.warn('Failed to save checklist progress:', error);
      }
    }

    static getItemProgress(checklistKey, itemId) {
      const progress = this.getProgress(checklistKey);
      return progress[itemId] || false;
    }
  }

  // Initialize checklist
  function initializeChecklist() {
    const container = document.getElementById(checklistId);
    if (!container) return;

    const listItems = container.querySelectorAll('li');
    let totalItems = 0;
    let completedItems = 0;

    listItems.forEach((li, index) => {
      // Check if this is a task list item (contains [ ] or [x] syntax)
      const text = li.textContent || '';
      const isTaskItem = /^\s*\[[\sxX]\]\s*/.test(text);

      if (!isTaskItem) return;

      totalItems++;
      const itemId = `item-${index}`;

      // Clean the text (remove markdown checkbox syntax)
      const cleanText = text.replace(/^\s*\[[\sxX]\]\s*/, '').trim();

      // Create checkbox and label
      const label = document.createElement('label');
      const checkbox = document.createElement('input');
      const span = document.createElement('span');

      checkbox.type = 'checkbox';
      checkbox.className = 'checklist-checkbox';
      checkbox.id = `${checklistId}-${itemId}`;

      span.className = 'checklist-text';
      span.textContent = cleanText;

      label.className = 'checklist-item';
      label.setAttribute('for', checkbox.id);
      label.appendChild(checkbox);
      label.appendChild(span);

      // Check if item was previously completed
      const wasChecked = text.includes('[x]') || text.includes('[X]');
      const savedProgress = ChecklistStore.getItemProgress(checklistKey, itemId);
      const isChecked = savedProgress || wasChecked;

      checkbox.checked = isChecked;
      if (isChecked) {
        completedItems++;
        label.classList.add('completed');
      }

      // Add event listener
      checkbox.addEventListener('change', (e) => {
        const checked = e.target.checked;
        ChecklistStore.setProgress(checklistKey, itemId, checked);

        if (checked) {
          label.classList.add('completed');
          completedItems++;
        } else {
          label.classList.remove('completed');
          completedItems--;
        }

        updateProgress(completedItems, totalItems);
      });

      // Replace li content
      li.innerHTML = '';
      li.appendChild(label);
      li.classList.add('checklist-li');
    });

    // Update initial progress
    if (showProgress) {
      updateProgress(completedItems, totalItems);
    }
  }

  function updateProgress(completed, total) {
    if (!showProgress) return;

    const container = document.getElementById(checklistId);
    if (!container) return;

    const progressFill = container.querySelector('.progress-fill');
    const progressCount = container.querySelector('.progress-count');

    if (progressFill) {
      const percentage = total > 0 ? (completed / total) * 100 : 0;
      progressFill.style.width = `${percentage}%`;
    }

    if (progressCount) {
      progressCount.textContent = `${completed} of ${total}`;
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeChecklist);
  } else {
    initializeChecklist();
  }
</script>

<style>
  .checklist-container {
    background: var(--bg-card);
    border: 1px solid var(--border-secondary);
    border-radius: 8px;
    padding: 1.5rem;
    margin: 2rem 0;
    position: relative;
    box-shadow: 0 2px 8px var(--shadow-secondary);
    transition: all 0.2s ease;
  }

  .checklist-container:hover {
    border-color: var(--border-primary);
    box-shadow: 0 4px 12px var(--shadow-primary);
  }

  .checklist-title {
    margin: 0 0 1rem 0;
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-primary);
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .checklist-title::before {
    content: 'âœ…';
    font-size: 1.1rem;
  }

  .checklist-content {
    margin-bottom: 1rem;
  }

  /* Override default list styling */
  .checklist-container :global(ul) {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .checklist-container :global(.checklist-li) {
    margin: 0 0 0.75rem 0;
    padding: 0;
  }

  .checklist-item {
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 6px;
    transition: all 0.2s ease;
    user-select: none;
    line-height: 1.5;
  }

  .checklist-item:hover {
    background: var(--bg-tertiary);
  }

  .checklist-checkbox {
    margin: 0;
    margin-top: 0.125rem; /* Align with text baseline */
    width: 1rem;
    height: 1rem;
    accent-color: var(--accent-primary);
    cursor: pointer;
    flex-shrink: 0;
  }

  .checklist-text {
    flex: 1;
    color: var(--text-secondary);
    transition: all 0.3s ease;
  }

  /* Completed state */
  .checklist-item.completed .checklist-text {
    color: var(--text-muted);
    text-decoration: line-through;
    text-decoration-color: var(--accent-primary);
  }

  .checklist-item.completed {
    opacity: 0.7;
  }

  /* Progress section */
  .progress-container {
    padding-top: 1rem;
    border-top: 1px solid var(--border-secondary);
    margin-top: 1rem;
  }

  .progress-bar {
    width: 100%;
    height: 0.5rem;
    background: var(--bg-secondary);
    border-radius: 0.25rem;
    overflow: hidden;
    margin-bottom: 0.5rem;
  }

  .progress-fill {
    height: 100%;
    background: linear-gradient(90deg, var(--accent-primary), var(--accent-hover));
    width: 0%;
    transition: width 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    border-radius: inherit;
  }

  .progress-text {
    font-size: 0.875rem;
    color: var(--text-muted);
    text-align: center;
  }

  .progress-count {
    font-weight: 600;
    color: var(--text-secondary);
  }

  /* Focus states for accessibility */
  .checklist-checkbox:focus-visible {
    outline: 2px solid var(--accent-primary);
    outline-offset: 2px;
  }

  .checklist-item:focus-within {
    background: var(--bg-tertiary);
  }

  /* Responsive adjustments */
  @media (max-width: 640px) {
    .checklist-container {
      padding: 1rem;
      margin: 1rem 0;
    }

    .checklist-item {
      padding: 0.375rem;
      gap: 0.5rem;
    }

    .checklist-checkbox {
      width: 0.875rem;
      height: 0.875rem;
    }
  }

  /* Print styles */
  @media print {
    .checklist-container {
      border: 1px solid #ccc;
      box-shadow: none;
      background: white;
    }

    .progress-container {
      display: none;
    }

    .checklist-item {
      background: none !important;
    }

    .checklist-text {
      color: black !important;
    }

    .checklist-item.completed .checklist-text {
      color: #666 !important;
    }
  }
</style>
