---
export interface Props {
  checklistKey: string;
  title?: string;
}

const { checklistKey, title } = Astro.props;
---

<check-list data-checklist-key={checklistKey}>
  <div class="checklist">
    {title && <h3 class="checklist-title">{title}</h3>}
    <slot />
  </div>
</check-list>

<style>
  check-list {
    display: block;
    margin: 1rem 0;
    padding: 1rem;
    border-radius: 0.5rem;
    background: var(--sl-color-gray-6);
  }

  .checklist-title {
    margin-top: 0;
    margin-bottom: 1rem;
    color: var(--sl-color-white);
  }

  check-list > * + * {
    margin-top: 1rem;
  }

  .checklist {
    position: relative;
  }

  .checklist > :global(ul) {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .checklist > :global(ul li) {
    margin: 0.5rem 0;
    padding: 0;
  }

  check-list :global(label) {
    display: grid;
    grid-template-columns: 1.5rem 1fr;
    gap: 0.5rem;
    align-items: baseline;
    position: relative;
    padding: 0.5rem;
    border-radius: 0.25rem;
    cursor: pointer;
    color: var(--sl-color-gray-2);
    transition: all 0.2s ease;
  }

  check-list :global(label:hover) {
    background: var(--sl-color-gray-5);
  }

  check-list :global(input[type='checkbox']) {
    appearance: none;
    -webkit-appearance: none;
    width: 1.25rem;
    height: 1.25rem;
    border: 2px solid var(--sl-color-gray-4);
    border-radius: 0.25rem;
    margin: 0;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  check-list :global(input[type='checkbox']:focus-visible) {
    outline: 2px solid var(--sl-color-green);
    outline-offset: 2px;
  }

  check-list :global(input[type='checkbox']:checked) {
    background-color: var(--sl-color-green);
    border-color: var(--sl-color-green);
  }

  check-list :global(input[type='checkbox']:checked::after) {
    content: '';
    display: block;
    width: 0.5rem;
    height: 0.875rem;
    border: solid white;
    border-width: 0 2px 2px 0;
    transform: translate(0.25rem, -0.125rem) rotate(45deg);
  }

  check-list :global(label:has(> input[type='checkbox']:checked)) {
    color: var(--sl-color-green);
    text-decoration: line-through;
    text-decoration-color: var(--sl-color-green);
  }

  check-list :global(.task-text) {
    line-height: 1.5;
  }

  check-list :global(.progress-bar) {
    position: absolute;
    bottom: -0.5rem;
    left: 0;
    width: 100%;
    height: 0.25rem;
    background: var(--sl-color-gray-5);
    border-radius: 0.125rem;
    overflow: hidden;
  }

  check-list :global(.progress-bar-fill) {
    height: 100%;
    background: var(--sl-color-green);
    transition: width 0.3s ease;
  }
</style>

<script>
  import { ProgressStore, type SubListType } from './tutorial/ProgressStore';

  class CheckList extends HTMLElement {
    private key!: string;
    private progressBar: HTMLDivElement | null = null;

    constructor() {
      super();
    }

    connectedCallback() {
      this.key = this.dataset['checklistKey']!;
      ProgressStore.initialiseList(this.key);
      
      // Create progress bar
      this.progressBar = document.createElement('div');
      this.progressBar.className = 'progress-bar';
      this.progressBar.innerHTML = '<div class="progress-bar-fill"></div>';
      this.querySelector('.checklist')?.appendChild(this.progressBar);

      // Initialize checklists
      this.upgradeSubList(this.querySelector('.checklist > ul'), 'primary');
      this.upgradeSubList(this.querySelector('.checklist.alternative > ul'), 'secondary');
    }

    /** Upgrade the primary or secondary check lists. */
    upgradeSubList(ul: Element | null, type: SubListType) {
      if (!ul) return;
      const items = Array.from(ul.children);
      ProgressStore.initaliseSubList(this.key, type, items.length);
      items.forEach((li, index) => this.upgradeTaskItem(li, type, index));
      this.updateProgress(type);
    }

    /** Upgrade an item in a GitHub-Flavoured Markdown task list. */
    upgradeTaskItem(li: Element, type: SubListType, index: number) {
      // Remove any existing checkbox from markdown processing
      const existingCheckbox = li.querySelector('input[type="checkbox"]');
      if (existingCheckbox) {
        existingCheckbox.remove();
      }

      // Convert markdown task list item to interactive checkbox
      const originalHtml = li.innerHTML;
      const label = document.createElement('label');
      const checkbox = document.createElement('input');
      const span = document.createElement('span');

      checkbox.type = 'checkbox';
      checkbox.checked = ProgressStore.getSubListItem(this.key, type, index);
      span.className = 'task-text';
      // Remove the markdown checkbox syntax and any leftover whitespace
      span.innerHTML = originalHtml
        .replace(/^\*?\s*\[\s*[xX ]?\s*\]\s*/, '')  // Remove markdown checkbox syntax
        .replace(/^\s+/, '');  // Remove leading whitespace

      label.appendChild(checkbox);
      label.appendChild(span);
      li.innerHTML = '';
      li.appendChild(label);

      checkbox.addEventListener('change', (e) => {
        const input = e.currentTarget as HTMLInputElement;
        ProgressStore.setSubListItem(this.key, type, index, input.checked);
        this.updateProgress(type);
      });
    }

    /** Update the progress bar */
    updateProgress(type: SubListType) {
      const list = ProgressStore.getListState(this.key, type);
      if (!list.length) return;

      const total = list.length;
      const completed = list.filter(Boolean).length;
      const percentage = (completed / total) * 100;

      const fill = this.progressBar?.querySelector('.progress-bar-fill') as HTMLDivElement;
      if (fill) {
        fill.style.width = `${percentage}%`;
      }
    }
  }

  customElements.define('check-list', CheckList);
</script>