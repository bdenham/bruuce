---
interface Props {
  title?: string;
  showRoot?: boolean;
  rootName?: string;
}

const { title, showRoot = true, rootName = 'Project' } = Astro.props;
const treeId = `filetree-${Math.random().toString(36).substr(2, 9)}`;
---

<div class="file-tree-container">
  {title && <h4 class="file-tree-title">📁 {title}</h4>}
  <div id={treeId} class="file-tree" data-show-root={showRoot.toString()} data-root-name={rootName}>
    <div class="file-tree-content">
      <slot />
    </div>
  </div>
</div>

<script define:vars={{ treeId, showRoot, rootName }}>
  function initializeFileTree() {
    const container = document.getElementById(treeId);
    if (!container) return;

    const content = container.querySelector('.file-tree-content');
    const ul = content?.querySelector('ul');

    if (!ul) {
      console.warn('FileTree expects content to be a <ul> element');
      return;
    }

    // Process the tree structure
    processFileTree(ul);

    // Create root wrapper if needed
    if (showRoot) {
      const rootDetails = document.createElement('details');
      rootDetails.className = 'directory root-directory';
      rootDetails.open = true;

      const rootSummary = document.createElement('summary');
      rootSummary.className = 'tree-entry';
      rootSummary.innerHTML = `
        <span class="tree-icon">📁</span>
        <span class="tree-name">${rootName}/</span>
      `;

      rootDetails.appendChild(rootSummary);
      rootDetails.appendChild(ul);

      content.innerHTML = '';
      content.appendChild(rootDetails);
    }
  }

  function processFileTree(ul) {
    const items = Array.from(ul.children);

    items.forEach((li) => {
      const text = li.textContent?.trim() || '';
      const childUl = li.querySelector('ul');

      // Clean the text content
      const cleanText = text.replace(/^\s*[-*+]\s*/, '').trim();

      if (childUl) {
        // This is a directory
        const details = document.createElement('details');
        details.className = 'directory';
        details.open = false; // Collapsed by default

        const summary = document.createElement('summary');
        summary.className = 'tree-entry';

        // Extract directory name (everything before the first nested item)
        const dirName = cleanText.split('\n')[0] || cleanText;

        summary.innerHTML = `
          <span class="tree-icon">📁</span>
          <span class="tree-name">${dirName}/</span>
        `;

        details.appendChild(summary);

        // Process nested ul
        processFileTree(childUl);
        details.appendChild(childUl);

        li.innerHTML = '';
        li.appendChild(details);
        li.className = 'tree-item directory-item';
      } else {
        // This is a file
        const wrapper = document.createElement('div');
        wrapper.className = 'tree-entry';

        // Determine file type and icon
        const { icon, type } = getFileIcon(cleanText);

        wrapper.innerHTML = `
          <span class="tree-icon">${icon}</span>
          <span class="tree-name">${cleanText}</span>
        `;

        li.innerHTML = '';
        li.appendChild(wrapper);
        li.className = `tree-item file-item file-${type}`;
      }
    });
  }

  function getFileIcon(filename) {
    const ext = filename.split('.').pop()?.toLowerCase() || '';

    const iconMap = {
      // Code files
      js: { icon: '📜', type: 'javascript' },
      ts: { icon: '📘', type: 'typescript' },
      jsx: { icon: '⚛️', type: 'react' },
      tsx: { icon: '⚛️', type: 'react' },
      vue: { icon: '💚', type: 'vue' },
      py: { icon: '🐍', type: 'python' },
      java: { icon: '☕', type: 'java' },
      php: { icon: '🐘', type: 'php' },
      rb: { icon: '💎', type: 'ruby' },
      go: { icon: '🐹', type: 'go' },
      rs: { icon: '🦀', type: 'rust' },
      cpp: { icon: '⚡', type: 'cpp' },
      c: { icon: '⚡', type: 'c' },

      // Web files
      html: { icon: '🌐', type: 'html' },
      css: { icon: '🎨', type: 'css' },
      scss: { icon: '🎨', type: 'scss' },
      sass: { icon: '🎨', type: 'sass' },

      // Config files
      json: { icon: '⚙️', type: 'config' },
      yaml: { icon: '⚙️', type: 'config' },
      yml: { icon: '⚙️', type: 'config' },
      toml: { icon: '⚙️', type: 'config' },
      xml: { icon: '⚙️', type: 'config' },

      // Documentation
      md: { icon: '📄', type: 'markdown' },
      txt: { icon: '📄', type: 'text' },
      pdf: { icon: '📕', type: 'pdf' },

      // Images
      png: { icon: '🖼️', type: 'image' },
      jpg: { icon: '🖼️', type: 'image' },
      jpeg: { icon: '🖼️', type: 'image' },
      gif: { icon: '🖼️', type: 'image' },
      svg: { icon: '🎨', type: 'image' },
      webp: { icon: '🖼️', type: 'image' },

      // Archives
      zip: { icon: '📦', type: 'archive' },
      tar: { icon: '📦', type: 'archive' },
      gz: { icon: '📦', type: 'archive' },

      // Special files
      gitignore: { icon: '🙈', type: 'git' },
      dockerfile: { icon: '🐳', type: 'docker' },
      Dockerfile: { icon: '🐳', type: 'docker' },
    };

    // Check for special filenames first
    const filename_lower = filename.toLowerCase();
    if (iconMap[filename_lower]) {
      return iconMap[filename_lower];
    }

    // Check by extension
    if (iconMap[ext]) {
      return iconMap[ext];
    }

    // Default file icon
    return { icon: '📄', type: 'default' };
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeFileTree);
  } else {
    initializeFileTree();
  }
</script>

<style>
  .file-tree-container {
    margin: 2rem 0;
    background: var(--bg-card);
    border: 1px solid var(--border-secondary);
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 8px var(--shadow-secondary);
  }

  .file-tree-container:hover {
    border-color: var(--border-primary);
    box-shadow: 0 4px 12px var(--shadow-primary);
  }

  .file-tree-title {
    margin: 0;
    padding: 1rem 1.25rem;
    background: var(--bg-tertiary);
    border-bottom: 1px solid var(--border-secondary);
    font-size: 1rem;
    font-weight: 600;
    color: var(--text-primary);
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .file-tree {
    padding: 1rem;
    background: var(--bg-primary);
    font-family: 'Courier New', Courier, 'Lucida Console', 'Monaco', monospace;
    font-size: 0.875rem;
    line-height: 1.4;
    overflow-x: auto;
  }

  /* Root directory styling */
  .root-directory {
    border: none;
    margin: 0;
  }

  .root-directory > summary {
    font-weight: 600;
    color: var(--text-primary);
    margin-bottom: 0.5rem;
  }

  /* Directory styling */
  .directory {
    margin: 0;
    border: none;
  }

  .directory > summary {
    list-style: none;
    cursor: pointer;
    padding: 0.25rem 0;
    border-radius: 4px;
    transition: all 0.2s ease;
    user-select: none;
  }

  .directory > summary:hover {
    background: var(--bg-tertiary);
    color: var(--accent-primary);
  }

  .directory > summary::marker,
  .directory > summary::-webkit-details-marker {
    display: none;
  }

  .directory[open] > summary {
    margin-bottom: 0.5rem;
  }

  /* Tree structure */
  .file-tree ul {
    list-style: none;
    padding: 0;
    margin: 0 0 0 1rem;
    border-left: 1px solid var(--border-secondary);
    position: relative;
  }

  .file-tree > .file-tree-content > ul,
  .root-directory > ul {
    border-left: none;
    margin-left: 0;
  }

  .tree-item {
    position: relative;
    padding: 0.125rem 0;
  }

  .tree-item::before {
    content: '';
    position: absolute;
    left: -1rem;
    top: 0.75rem;
    width: 0.75rem;
    height: 1px;
    background: var(--border-secondary);
  }

  .file-tree > .file-tree-content > ul > .tree-item::before,
  .root-directory > ul > .tree-item::before {
    display: none;
  }

  .tree-entry {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--text-secondary);
    transition: color 0.2s ease;
  }

  .tree-entry:hover {
    color: var(--text-primary);
  }

  .tree-icon {
    font-size: 1rem;
    line-height: 1;
    flex-shrink: 0;
  }

  .tree-name {
    font-family: inherit;
    word-break: break-all;
  }

  /* File type specific styling */
  .file-javascript .tree-name,
  .file-typescript .tree-name {
    color: var(--text-secondary);
  }

  .file-html .tree-name,
  .file-css .tree-name {
    color: var(--text-secondary);
  }

  .file-config .tree-name {
    color: var(--text-muted);
    font-style: italic;
  }

  .directory-item .tree-name {
    font-weight: 500;
    color: var(--text-primary);
  }

  /* Hover effects */
  .tree-item:hover .tree-entry {
    background: var(--bg-tertiary);
    padding: 0.25rem 0.5rem;
    margin: -0.25rem -0.5rem;
    border-radius: 4px;
  }

  /* Responsive adjustments */
  @media (max-width: 640px) {
    .file-tree {
      padding: 0.75rem;
      font-size: 0.8rem;
    }

    .file-tree ul {
      margin-left: 0.75rem;
    }

    .tree-item::before {
      left: -0.75rem;
      width: 0.5rem;
    }

    .tree-entry {
      gap: 0.375rem;
    }

    .tree-icon {
      font-size: 0.875rem;
    }
  }

  /* Print styles */
  @media print {
    .file-tree-container {
      border: 1px solid #ccc;
      box-shadow: none;
      background: white;
    }

    .file-tree-title {
      background: #f5f5f5;
      color: black;
    }

    .file-tree {
      background: white;
    }

    .tree-entry,
    .tree-name {
      color: black !important;
    }

    .file-tree ul {
      border-left-color: #ccc;
    }

    .tree-item::before {
      background: #ccc;
    }

    .directory > summary:hover {
      background: none;
    }
  }
</style>
