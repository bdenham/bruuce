---
interface Props {
  text?: string;
  position?: 'top' | 'bottom' | 'left' | 'right';
  maxWidth?: string;
}

const { text = 'Default tooltip text', position = 'bottom', maxWidth = '200px' } = Astro.props;
---

<div
  class="tooltip-container"
  tabindex="0"
  role="button"
  aria-label={`Show tooltip: ${text}`}
  data-position={position}
>
  <slot />
  <div class="tooltip-text" role="tooltip" style={`max-width: ${maxWidth}`} aria-hidden="true">
    <span class="tooltip-text-content">{text}</span>
  </div>
</div>

<style>
  .tooltip-container {
    position: relative;
    display: inline-block;
    cursor: help;
  }

  .tooltip-text {
    visibility: hidden;
    min-width: 120px;
    background: var(--bg-tertiary);
    border: 1px solid var(--border-primary);
    color: var(--text-primary);
    text-align: center;
    padding: 8px 12px;
    border-radius: 8px;
    box-shadow: 0 4px 12px var(--shadow-primary);
    backdrop-filter: blur(8px);
    position: absolute;
    z-index: 1000;
    font-size: 0.875rem;
    line-height: 1.4;
    white-space: normal;
    box-sizing: border-box;
    opacity: 0;
    transform: translateY(8px);
    transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    pointer-events: none;
  }

  /* Position variants */
  .tooltip-container[data-position='bottom'] .tooltip-text {
    top: calc(100% + 8px);
    left: 50%;
    transform: translateX(-50%) translateY(8px);
  }

  .tooltip-container[data-position='top'] .tooltip-text {
    bottom: calc(100% + 8px);
    left: 50%;
    transform: translateX(-50%) translateY(-8px);
  }

  .tooltip-container[data-position='left'] .tooltip-text {
    top: 50%;
    right: calc(100% + 8px);
    transform: translateY(-50%) translateX(-8px);
  }

  .tooltip-container[data-position='right'] .tooltip-text {
    top: 50%;
    left: calc(100% + 8px);
    transform: translateY(-50%) translateX(8px);
  }

  .tooltip-text-content {
    word-wrap: break-word;
    display: block;
  }

  /* Hover and focus states */
  .tooltip-container:hover .tooltip-text,
  .tooltip-container:focus .tooltip-text {
    visibility: visible;
    opacity: 1;
    transform: translateX(-50%) translateY(0);
  }

  .tooltip-container[data-position='top']:hover .tooltip-text,
  .tooltip-container[data-position='top']:focus .tooltip-text {
    transform: translateX(-50%) translateY(0);
  }

  .tooltip-container[data-position='left']:hover .tooltip-text,
  .tooltip-container[data-position='left']:focus .tooltip-text {
    transform: translateY(-50%) translateX(0);
  }

  .tooltip-container[data-position='right']:hover .tooltip-text,
  .tooltip-container[data-position='right']:focus .tooltip-text {
    transform: translateY(-50%) translateX(0);
  }

  /* Arrows */
  .tooltip-text::after {
    content: '';
    position: absolute;
    border-style: solid;
    border-width: 6px;
  }

  /* Bottom arrow (tooltip above) */
  .tooltip-container[data-position='bottom'] .tooltip-text::after {
    top: -12px;
    left: 50%;
    margin-left: -6px;
    border-color: transparent transparent var(--bg-tertiary) transparent;
  }

  /* Top arrow (tooltip below) */
  .tooltip-container[data-position='top'] .tooltip-text::after {
    bottom: -12px;
    left: 50%;
    margin-left: -6px;
    border-color: var(--bg-tertiary) transparent transparent transparent;
  }

  /* Left arrow (tooltip to the right) */
  .tooltip-container[data-position='left'] .tooltip-text::after {
    top: 50%;
    right: -12px;
    margin-top: -6px;
    border-color: transparent transparent transparent var(--bg-tertiary);
  }

  /* Right arrow (tooltip to the left) */
  .tooltip-container[data-position='right'] .tooltip-text::after {
    top: 50%;
    left: -12px;
    margin-top: -6px;
    border-color: transparent var(--bg-tertiary) transparent transparent;
  }

  /* Accessibility improvements */
  .tooltip-container:focus {
    outline: 2px solid var(--accent-primary);
    outline-offset: 2px;
    border-radius: 4px;
  }

  /* Responsive adjustments */
  @media (max-width: 480px) {
    .tooltip-text {
      max-width: 80vw;
      font-size: 0.8rem;
    }
  }
</style>

<script>
  // Handle proper ARIA states for tooltip
  document.addEventListener('DOMContentLoaded', () => {
    const tooltips = document.querySelectorAll('.tooltip-container');

    tooltips.forEach((container) => {
      const tooltipText = container.querySelector('.tooltip-text');

      if (!tooltipText) return;

      // Show tooltip on hover/focus
      const showTooltip = () => {
        tooltipText.setAttribute('aria-hidden', 'false');
      };

      // Hide tooltip
      const hideTooltip = () => {
        tooltipText.setAttribute('aria-hidden', 'true');
      };

      // Add event listeners
      container.addEventListener('mouseenter', showTooltip);
      container.addEventListener('focus', showTooltip);
      container.addEventListener('mouseleave', hideTooltip);
      container.addEventListener('blur', hideTooltip);

      // Handle Enter/Space key activation
      container.addEventListener('keydown', (e) => {
        const keyEvent = e as KeyboardEvent;
        if (keyEvent.key === 'Enter' || keyEvent.key === ' ') {
          e.preventDefault();
          if (tooltipText.getAttribute('aria-hidden') === 'true') {
            showTooltip();
          } else {
            hideTooltip();
          }
        }
      });
    });
  });
</script>
