---
interface Props {
  src: string | {
    src: string;
    width: number;
    height: number;
    format: string;
  };
  alt: string;
  caption?: string;
  width?: string;
  height?: string;
  clickToZoom?: boolean;
}

const { src, alt, caption, width = '100%', height = 'auto', clickToZoom = true } = Astro.props;

// Handle both string and object src formats
const imageSrc = typeof src === 'string' ? src : src.src;
const imageWidth = typeof src === 'object' ? src.width : undefined;
const imageHeight = typeof src === 'object' ? src.height : undefined;

const screenshotId = `screenshot-${Math.random().toString(36).substr(2, 9)}`;
---

<figure class="screenshot-figure">
  <div 
    class="screenshot" 
    class:list={[{ 'clickable': clickToZoom }]}
    data-screenshot-id={screenshotId}
  >
    <img 
      src={imageSrc} 
      alt={alt} 
      width={imageWidth}
      height={imageHeight}
      style={`width: ${width}; height: ${height};`}
      class="screenshot-image"
      loading="lazy"
    />
    {clickToZoom && (
      <div class="zoom-hint">
        <span class="zoom-icon">üîç</span>
        Click to zoom
      </div>
    )}
  </div>
  {caption && (
    <figcaption class="screenshot-caption">
      {caption}
    </figcaption>
  )}
</figure>

{clickToZoom && (
  <script define:vars={{ screenshotId }}>
    document.addEventListener('DOMContentLoaded', () => {
      const screenshot = document.querySelector('[data-screenshot-id="' + screenshotId + '"]');
      const img = screenshot?.querySelector('.screenshot-image');
      
      if (!screenshot || !img) return;
      
      screenshot.addEventListener('click', () => {
        // Create modal
        const modal = document.createElement('div');
        modal.className = 'screenshot-modal';
        modal.innerHTML = 
          '<div class="screenshot-modal-backdrop">' +
            '<div class="screenshot-modal-content">' +
              '<button class="screenshot-modal-close" aria-label="Close">√ó</button>' +
              '<img src="' + img.src + '" alt="' + img.alt + '" class="screenshot-modal-image" />' +
            '</div>' +
          '</div>';
        
        // Add modal styles
        modal.style.cssText = `
          position: fixed;
          top: 0;
          left: 0;
          width: 100vw;
          height: 100vh;
          z-index: 10000;
          display: flex;
          align-items: center;
          justify-content: center;
          background: rgba(0, 0, 0, 0);
          transition: background 0.3s ease;
        `;
        
        const backdrop = modal.querySelector('.screenshot-modal-backdrop');
        backdrop.style.cssText = `
          width: 100%;
          height: 100%;
          display: flex;
          align-items: center;
          justify-content: center;
          cursor: zoom-out;
        `;
        
        const content = modal.querySelector('.screenshot-modal-content');
        content.style.cssText = `
          position: relative;
          max-width: 95vw;
          max-height: 95vh;
          border-radius: 12px;
          overflow: hidden;
          box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5);
          transform: scale(0.8);
          transition: transform 0.3s ease;
        `;
        
        const modalImg = modal.querySelector('.screenshot-modal-image');
        modalImg.style.cssText = `
          width: 100%;
          height: 100%;
          object-fit: contain;
          display: block;
        `;
        
        const closeBtn = modal.querySelector('.screenshot-modal-close');
        closeBtn.style.cssText = `
          position: absolute;
          top: 16px;
          right: 16px;
          width: 40px;
          height: 40px;
          border: none;
          border-radius: 50%;
          background: rgba(0, 0, 0, 0.7);
          color: white;
          font-size: 24px;
          cursor: pointer;
          display: flex;
          align-items: center;
          justify-content: center;
          z-index: 1;
          transition: background 0.2s ease;
        `;
        
        // Event handlers
        const closeModal = () => {
          modal.style.background = 'rgba(0, 0, 0, 0)';
          content.style.transform = 'scale(0.8)';
          setTimeout(() => document.body.removeChild(modal), 300);
        };
        
        closeBtn.addEventListener('click', closeModal);
        backdrop.addEventListener('click', (e) => {
          if (e.target === backdrop) closeModal();
        });
        
        document.addEventListener('keydown', function escHandler(e) {
          if (e.key === 'Escape') {
            document.removeEventListener('keydown', escHandler);
            closeModal();
          }
        });
        
        // Show modal
        document.body.appendChild(modal);
        requestAnimationFrame(() => {
          modal.style.background = 'rgba(0, 0, 0, 0.8)';
          content.style.transform = 'scale(1)';
        });
        
        closeBtn.addEventListener('mouseenter', () => {
          closeBtn.style.background = 'rgba(0, 0, 0, 0.9)';
        });
        
        closeBtn.addEventListener('mouseleave', () => {
          closeBtn.style.background = 'rgba(0, 0, 0, 0.7)';
        });
      });
    });
  </script>
)}

<style>
  .screenshot-figure {
    margin: 2rem 0;
    padding: 0;
  }

  .screenshot {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    overflow: hidden;
    border-radius: 8px;
    border: 1px solid var(--border-secondary);
    background: var(--bg-card);
    box-shadow: 0 4px 12px var(--shadow-secondary);
    transition: all 0.2s ease;
  }
  
  .screenshot.clickable {
    cursor: zoom-in;
  }
  
  .screenshot.clickable:hover {
    border-color: var(--border-primary);
    box-shadow: 0 6px 20px var(--shadow-primary);
    transform: translateY(-2px);
  }

  .screenshot-image {
    user-select: none;
    object-fit: cover;
    max-width: 100%;
    height: auto;
    display: block;
  }
  
  .zoom-hint {
    position: absolute;
    top: 12px;
    right: 12px;
    background: var(--bg-tertiary);
    border: 1px solid var(--border-secondary);
    border-radius: 6px;
    padding: 6px 10px;
    font-size: 0.75rem;
    color: var(--text-muted);
    display: flex;
    align-items: center;
    gap: 4px;
    opacity: 0;
    transform: translateY(-4px);
    transition: all 0.2s ease;
    pointer-events: none;
    backdrop-filter: blur(4px);
  }
  
  .screenshot.clickable:hover .zoom-hint {
    opacity: 1;
    transform: translateY(0);
  }
  
  .zoom-icon {
    font-size: 0.875rem;
  }

  .screenshot-caption {
    margin-top: 0.75rem;
    text-align: center;
    font-size: 0.875rem;
    color: var(--text-muted);
    font-style: italic;
    line-height: 1.4;
  }

  /* Responsive adjustments */
  @media (max-width: 640px) {
    .screenshot {
      border-radius: 6px;
    }
    
    .zoom-hint {
      font-size: 0.7rem;
      padding: 4px 8px;
    }
  }
</style>